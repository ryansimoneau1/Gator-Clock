Version 4.0 HI-TECH Software Intermediate Code
"24 ./rendering.h
[; ;./rendering.h: 24: typedef struct BlockSet{
[s S2 `uc 1 `uc 1 `uc 1 `uc 1 `uc 1 `uc 1 `uc 1 `uc 1 `uc 1 `uc 1 `uc 1 `uc 1 `uc 1 `uc 1 `uc 1 `uc 1 `uc 1 `uc 1 `uc 1 `uc 1 `uc 1 ]
[n S2 BlockSet ABlock BBlock CBlock DBlock EBlock FBlock GBlock HBlock IBlock JBlock KBlock LBlock MBlock NBlock OBlock PBlock QBlock RBlock SBlock TBlock UBlock ]
"48
[; ;./rendering.h: 48: typedef struct TensOnes{
[s S3 `uc 1 `uc 1 `uc 1 `uc 1 ]
[n S3 TensOnes HourOnes HourTens MinuteOnes MinuteTens ]
"17
[; ;./rendering.h: 17: typedef struct Render{
[s S1 `uc 1 `uc 1 `uc 1 `uc 1 ]
[n S1 Render Common_Line_One Common_Line_Two Access_Line_one Access_Line_Two ]
"9 rendering.c
[; ;rendering.c: 9: extern BlockSet NumberBlocks = {
[v _NumberBlocks `S2 ~T0 @X0 1 e ]
[i _NumberBlocks
:U ..
:U ..
-> -> 30 `i `uc
-> -> 33 `i `uc
-> -> 4 `i `uc
-> -> 12 `i `uc
-> -> 20 `i `uc
-> -> 63 `i `uc
-> -> 2 `i `uc
-> -> 32 `i `uc
-> -> 14 `i `uc
-> -> 1 `i `uc
-> -> 6 `i `uc
-> -> 10 `i `uc
-> -> 18 `i `uc
-> -> 34 `i `uc
-> -> 62 `i `uc
-> -> 46 `i `uc
-> -> 48 `i `uc
-> -> 8 `i `uc
-> -> 16 `i `uc
-> -> 35 `i `uc
-> -> 29 `i `uc
..
..
]
"33
[; ;rendering.c: 33: extern TensOnes tod_outputs = {
[v _tod_outputs `S3 ~T0 @X0 1 e ]
[i _tod_outputs
:U ..
:U ..
-> -> 0 `i `uc
-> -> 0 `i `uc
-> -> 0 `i `uc
-> -> 0 `i `uc
..
..
]
"40
[; ;rendering.c: 40: extern Render renderer_outputs = {
[v _renderer_outputs `S1 ~T0 @X0 1 e ]
[i _renderer_outputs
:U ..
:U ..
-> -> 0 `i `uc
-> -> 0 `i `uc
-> -> 0 `i `uc
-> -> 0 `i `uc
..
..
]
"48
[; ;rendering.c: 48: Uint8 Time_deconstruct(const Uint8 access_line, const Uint8 hours, const Uint8 minutes, TensOnes *output){
[v _Time_deconstruct `(uc ~T0 @X0 1 ef4`Cuc`Cuc`Cuc`*S3 ]
{
[e :U _Time_deconstruct ]
[v _access_line `Cuc ~T0 @X0 1 r1 ]
[v _hours `Cuc ~T0 @X0 1 r2 ]
[v _minutes `Cuc ~T0 @X0 1 r3 ]
[v _output `*S3 ~T0 @X0 1 r4 ]
[f ]
"49
[; ;rendering.c: 49:    static Uint8 character_line = 0;
[v F101 `uc ~T0 @X0 1 s character_line ]
[i F101
-> -> 0 `i `uc
]
"51
[; ;rendering.c: 51:    if(access_line < 6){
[e $ ! < -> _access_line `i -> 6 `i 5  ]
{
"52
[; ;rendering.c: 52:       character_line = access_line;
[e = F101 _access_line ]
"53
[; ;rendering.c: 53:       output->HourTens = hours / 10;
[e = . *U _output 1 -> / -> _hours `i -> 10 `i `uc ]
"54
[; ;rendering.c: 54:       output->MinuteTens = minutes / 10;
[e = . *U _output 3 -> / -> _minutes `i -> 10 `i `uc ]
"55
[; ;rendering.c: 55:    }
}
[e $U 6  ]
"56
[; ;rendering.c: 56:    else{
[e :U 5 ]
{
"57
[; ;rendering.c: 57:       character_line = access_line - 6;
[e = F101 -> - -> _access_line `i -> 6 `i `uc ]
"58
[; ;rendering.c: 58:       output->HourOnes = hours % 10;
[e = . *U _output 0 -> % -> _hours `i -> 10 `i `uc ]
"59
[; ;rendering.c: 59:       output->MinuteOnes = minutes % 10;
[e = . *U _output 2 -> % -> _minutes `i -> 10 `i `uc ]
"60
[; ;rendering.c: 60:    }
}
[e :U 6 ]
"61
[; ;rendering.c: 61:    return character_line;
[e ) F101 ]
[e $UE 4  ]
"62
[; ;rendering.c: 62: }
[e :UE 4 ]
}
"65
[; ;rendering.c: 65: Uint8 DigitAssembler(const Uint8 character_line,const BlockSet *Block, const Uint8 digit){
[v _DigitAssembler `(uc ~T0 @X0 1 ef3`Cuc`*CS2`Cuc ]
{
[e :U _DigitAssembler ]
[v _character_line `Cuc ~T0 @X0 1 r1 ]
[v _Block `*CS2 ~T0 @X0 1 r2 ]
[v _digit `Cuc ~T0 @X0 1 r3 ]
[f ]
"66
[; ;rendering.c: 66:     Uint8 Output = 0;
[v _Output `uc ~T0 @X0 1 a ]
[e = _Output -> -> 0 `i `uc ]
"257
[; ;rendering.c: 257:     return Output;
[e ) _Output ]
[e $UE 7  ]
"259
[; ;rendering.c: 259: }
[e :UE 7 ]
}
"265
[; ;rendering.c: 265: void Renderer(Uint8 left_common_line, Uint8 right_common_line, Uint8 access_line, Render *shift_reg_outputs){
[v _Renderer `(v ~T0 @X0 1 ef4`uc`uc`uc`*S1 ]
{
[e :U _Renderer ]
[v _left_common_line `uc ~T0 @X0 1 r1 ]
[v _right_common_line `uc ~T0 @X0 1 r2 ]
[v _access_line `uc ~T0 @X0 1 r3 ]
[v _shift_reg_outputs `*S1 ~T0 @X0 1 r4 ]
[f ]
"267
[; ;rendering.c: 267:    if(access_line < 8){
[e $ ! < -> _access_line `i -> 8 `i 9  ]
{
"268
[; ;rendering.c: 268:       shift_reg_outputs->Access_Line_one = 0b10000000 >> access_line;
[e = . *U _shift_reg_outputs 2 -> >> -> 128 `i -> _access_line `i `uc ]
"269
[; ;rendering.c: 269:       shift_reg_outputs->Access_Line_Two = 0;
[e = . *U _shift_reg_outputs 3 -> -> 0 `i `uc ]
"270
[; ;rendering.c: 270:    }else{
}
[e $U 10  ]
[e :U 9 ]
{
"271
[; ;rendering.c: 271:       shift_reg_outputs->Access_Line_one = 0;
[e = . *U _shift_reg_outputs 2 -> -> 0 `i `uc ]
"272
[; ;rendering.c: 272:       shift_reg_outputs->Access_Line_Two = 0b10000000 >> (access_line - 8);
[e = . *U _shift_reg_outputs 3 -> >> -> 128 `i - -> _access_line `i -> 8 `i `uc ]
"273
[; ;rendering.c: 273:    }
}
[e :U 10 ]
"275
[; ;rendering.c: 275:    shift_reg_outputs->Common_Line_One = left_common_line;
[e = . *U _shift_reg_outputs 0 _left_common_line ]
"276
[; ;rendering.c: 276:    shift_reg_outputs->Common_Line_Two = right_common_line;
[e = . *U _shift_reg_outputs 1 _right_common_line ]
"278
[; ;rendering.c: 278: }
[e :UE 8 ]
}
