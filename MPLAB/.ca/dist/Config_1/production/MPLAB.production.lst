

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Fri Nov 24 22:24:30 2023

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	16LF1826
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,noexec
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	inittext,global,class=CODE,delta=2
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    13                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    31                           	dabs	1,0x7E,2
    32     0000                     
    33                           ; Generated 06/07/2023 GMT
    34                           ; 
    35                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    36                           ; All rights reserved.
    37                           ; 
    38                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    39                           ; 
    40                           ; Redistribution and use in source and binary forms, with or without modification, are
    41                           ; permitted provided that the following conditions are met:
    42                           ; 
    43                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    44                           ;        conditions and the following disclaimer.
    45                           ; 
    46                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    47                           ;        of conditions and the following disclaimer in the documentation and/or other
    48                           ;        materials provided with the distribution. Publication is not required when
    49                           ;        this file is used in an embedded application.
    50                           ; 
    51                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    52                           ;        software without specific prior written permission.
    53                           ; 
    54                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    55                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    56                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    57                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    58                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    59                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    60                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    61                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    62                           ; 
    63                           ; 
    64                           ; Code-generator required, PIC16LF1826 Definitions
    65                           ; 
    66                           ; SFR Addresses
    67     0000                     	;# 
    68     0001                     	;# 
    69     0002                     	;# 
    70     0003                     	;# 
    71     0004                     	;# 
    72     0005                     	;# 
    73     0006                     	;# 
    74     0007                     	;# 
    75     0008                     	;# 
    76     0009                     	;# 
    77     000A                     	;# 
    78     000B                     	;# 
    79     000C                     	;# 
    80     000D                     	;# 
    81     0011                     	;# 
    82     0012                     	;# 
    83     0015                     	;# 
    84     0016                     	;# 
    85     0016                     	;# 
    86     0017                     	;# 
    87     0018                     	;# 
    88     0019                     	;# 
    89     001A                     	;# 
    90     001B                     	;# 
    91     001C                     	;# 
    92     001E                     	;# 
    93     001F                     	;# 
    94     008C                     	;# 
    95     008D                     	;# 
    96     0091                     	;# 
    97     0092                     	;# 
    98     0095                     	;# 
    99     0096                     	;# 
   100     0097                     	;# 
   101     0098                     	;# 
   102     0099                     	;# 
   103     009A                     	;# 
   104     009B                     	;# 
   105     009B                     	;# 
   106     009C                     	;# 
   107     009D                     	;# 
   108     009E                     	;# 
   109     010C                     	;# 
   110     010D                     	;# 
   111     0111                     	;# 
   112     0112                     	;# 
   113     0113                     	;# 
   114     0114                     	;# 
   115     0115                     	;# 
   116     0116                     	;# 
   117     0117                     	;# 
   118     0118                     	;# 
   119     0119                     	;# 
   120     011A                     	;# 
   121     011B                     	;# 
   122     011D                     	;# 
   123     011E                     	;# 
   124     018C                     	;# 
   125     018D                     	;# 
   126     0191                     	;# 
   127     0191                     	;# 
   128     0192                     	;# 
   129     0193                     	;# 
   130     0193                     	;# 
   131     0193                     	;# 
   132     0194                     	;# 
   133     0195                     	;# 
   134     0196                     	;# 
   135     0199                     	;# 
   136     019A                     	;# 
   137     019B                     	;# 
   138     019B                     	;# 
   139     019B                     	;# 
   140     019B                     	;# 
   141     019C                     	;# 
   142     019C                     	;# 
   143     019D                     	;# 
   144     019E                     	;# 
   145     019F                     	;# 
   146     020C                     	;# 
   147     020D                     	;# 
   148     0211                     	;# 
   149     0211                     	;# 
   150     0212                     	;# 
   151     0212                     	;# 
   152     0213                     	;# 
   153     0213                     	;# 
   154     0214                     	;# 
   155     0214                     	;# 
   156     0215                     	;# 
   157     0215                     	;# 
   158     0215                     	;# 
   159     0216                     	;# 
   160     0216                     	;# 
   161     0217                     	;# 
   162     0217                     	;# 
   163     0291                     	;# 
   164     0291                     	;# 
   165     0292                     	;# 
   166     0293                     	;# 
   167     0294                     	;# 
   168     0295                     	;# 
   169     0295                     	;# 
   170     0296                     	;# 
   171     0394                     	;# 
   172     0395                     	;# 
   173     0396                     	;# 
   174     039A                     	;# 
   175     039C                     	;# 
   176     039D                     	;# 
   177     039E                     	;# 
   178     039F                     	;# 
   179     0FE4                     	;# 
   180     0FE5                     	;# 
   181     0FE6                     	;# 
   182     0FE7                     	;# 
   183     0FE8                     	;# 
   184     0FE9                     	;# 
   185     0FEA                     	;# 
   186     0FEB                     	;# 
   187     0FED                     	;# 
   188     0FEE                     	;# 
   189     0FEF                     	;# 
   190     0000                     	;# 
   191     0001                     	;# 
   192     0002                     	;# 
   193     0003                     	;# 
   194     0004                     	;# 
   195     0005                     	;# 
   196     0006                     	;# 
   197     0007                     	;# 
   198     0008                     	;# 
   199     0009                     	;# 
   200     000A                     	;# 
   201     000B                     	;# 
   202     000C                     	;# 
   203     000D                     	;# 
   204     0011                     	;# 
   205     0012                     	;# 
   206     0015                     	;# 
   207     0016                     	;# 
   208     0016                     	;# 
   209     0017                     	;# 
   210     0018                     	;# 
   211     0019                     	;# 
   212     001A                     	;# 
   213     001B                     	;# 
   214     001C                     	;# 
   215     001E                     	;# 
   216     001F                     	;# 
   217     008C                     	;# 
   218     008D                     	;# 
   219     0091                     	;# 
   220     0092                     	;# 
   221     0095                     	;# 
   222     0096                     	;# 
   223     0097                     	;# 
   224     0098                     	;# 
   225     0099                     	;# 
   226     009A                     	;# 
   227     009B                     	;# 
   228     009B                     	;# 
   229     009C                     	;# 
   230     009D                     	;# 
   231     009E                     	;# 
   232     010C                     	;# 
   233     010D                     	;# 
   234     0111                     	;# 
   235     0112                     	;# 
   236     0113                     	;# 
   237     0114                     	;# 
   238     0115                     	;# 
   239     0116                     	;# 
   240     0117                     	;# 
   241     0118                     	;# 
   242     0119                     	;# 
   243     011A                     	;# 
   244     011B                     	;# 
   245     011D                     	;# 
   246     011E                     	;# 
   247     018C                     	;# 
   248     018D                     	;# 
   249     0191                     	;# 
   250     0191                     	;# 
   251     0192                     	;# 
   252     0193                     	;# 
   253     0193                     	;# 
   254     0193                     	;# 
   255     0194                     	;# 
   256     0195                     	;# 
   257     0196                     	;# 
   258     0199                     	;# 
   259     019A                     	;# 
   260     019B                     	;# 
   261     019B                     	;# 
   262     019B                     	;# 
   263     019B                     	;# 
   264     019C                     	;# 
   265     019C                     	;# 
   266     019D                     	;# 
   267     019E                     	;# 
   268     019F                     	;# 
   269     020C                     	;# 
   270     020D                     	;# 
   271     0211                     	;# 
   272     0211                     	;# 
   273     0212                     	;# 
   274     0212                     	;# 
   275     0213                     	;# 
   276     0213                     	;# 
   277     0214                     	;# 
   278     0214                     	;# 
   279     0215                     	;# 
   280     0215                     	;# 
   281     0215                     	;# 
   282     0216                     	;# 
   283     0216                     	;# 
   284     0217                     	;# 
   285     0217                     	;# 
   286     0291                     	;# 
   287     0291                     	;# 
   288     0292                     	;# 
   289     0293                     	;# 
   290     0294                     	;# 
   291     0295                     	;# 
   292     0295                     	;# 
   293     0296                     	;# 
   294     0394                     	;# 
   295     0395                     	;# 
   296     0396                     	;# 
   297     039A                     	;# 
   298     039C                     	;# 
   299     039D                     	;# 
   300     039E                     	;# 
   301     039F                     	;# 
   302     0FE4                     	;# 
   303     0FE5                     	;# 
   304     0FE6                     	;# 
   305     0FE7                     	;# 
   306     0FE8                     	;# 
   307     0FE9                     	;# 
   308     0FEA                     	;# 
   309     0FEB                     	;# 
   310     0FED                     	;# 
   311     0FEE                     	;# 
   312     0FEF                     	;# 
   313     0000                     	;# 
   314     0001                     	;# 
   315     0002                     	;# 
   316     0003                     	;# 
   317     0004                     	;# 
   318     0005                     	;# 
   319     0006                     	;# 
   320     0007                     	;# 
   321     0008                     	;# 
   322     0009                     	;# 
   323     000A                     	;# 
   324     000B                     	;# 
   325     000C                     	;# 
   326     000D                     	;# 
   327     0011                     	;# 
   328     0012                     	;# 
   329     0015                     	;# 
   330     0016                     	;# 
   331     0016                     	;# 
   332     0017                     	;# 
   333     0018                     	;# 
   334     0019                     	;# 
   335     001A                     	;# 
   336     001B                     	;# 
   337     001C                     	;# 
   338     001E                     	;# 
   339     001F                     	;# 
   340     008C                     	;# 
   341     008D                     	;# 
   342     0091                     	;# 
   343     0092                     	;# 
   344     0095                     	;# 
   345     0096                     	;# 
   346     0097                     	;# 
   347     0098                     	;# 
   348     0099                     	;# 
   349     009A                     	;# 
   350     009B                     	;# 
   351     009B                     	;# 
   352     009C                     	;# 
   353     009D                     	;# 
   354     009E                     	;# 
   355     010C                     	;# 
   356     010D                     	;# 
   357     0111                     	;# 
   358     0112                     	;# 
   359     0113                     	;# 
   360     0114                     	;# 
   361     0115                     	;# 
   362     0116                     	;# 
   363     0117                     	;# 
   364     0118                     	;# 
   365     0119                     	;# 
   366     011A                     	;# 
   367     011B                     	;# 
   368     011D                     	;# 
   369     011E                     	;# 
   370     018C                     	;# 
   371     018D                     	;# 
   372     0191                     	;# 
   373     0191                     	;# 
   374     0192                     	;# 
   375     0193                     	;# 
   376     0193                     	;# 
   377     0193                     	;# 
   378     0194                     	;# 
   379     0195                     	;# 
   380     0196                     	;# 
   381     0199                     	;# 
   382     019A                     	;# 
   383     019B                     	;# 
   384     019B                     	;# 
   385     019B                     	;# 
   386     019B                     	;# 
   387     019C                     	;# 
   388     019C                     	;# 
   389     019D                     	;# 
   390     019E                     	;# 
   391     019F                     	;# 
   392     020C                     	;# 
   393     020D                     	;# 
   394     0211                     	;# 
   395     0211                     	;# 
   396     0212                     	;# 
   397     0212                     	;# 
   398     0213                     	;# 
   399     0213                     	;# 
   400     0214                     	;# 
   401     0214                     	;# 
   402     0215                     	;# 
   403     0215                     	;# 
   404     0215                     	;# 
   405     0216                     	;# 
   406     0216                     	;# 
   407     0217                     	;# 
   408     0217                     	;# 
   409     0291                     	;# 
   410     0291                     	;# 
   411     0292                     	;# 
   412     0293                     	;# 
   413     0294                     	;# 
   414     0295                     	;# 
   415     0295                     	;# 
   416     0296                     	;# 
   417     0394                     	;# 
   418     0395                     	;# 
   419     0396                     	;# 
   420     039A                     	;# 
   421     039C                     	;# 
   422     039D                     	;# 
   423     039E                     	;# 
   424     039F                     	;# 
   425     0FE4                     	;# 
   426     0FE5                     	;# 
   427     0FE6                     	;# 
   428     0FE7                     	;# 
   429     0FE8                     	;# 
   430     0FE9                     	;# 
   431     0FEA                     	;# 
   432     0FEB                     	;# 
   433     0FED                     	;# 
   434     0FEE                     	;# 
   435     0FEF                     	;# 
   436     0000                     	;# 
   437     0001                     	;# 
   438     0002                     	;# 
   439     0003                     	;# 
   440     0004                     	;# 
   441     0005                     	;# 
   442     0006                     	;# 
   443     0007                     	;# 
   444     0008                     	;# 
   445     0009                     	;# 
   446     000A                     	;# 
   447     000B                     	;# 
   448     000C                     	;# 
   449     000D                     	;# 
   450     0011                     	;# 
   451     0012                     	;# 
   452     0015                     	;# 
   453     0016                     	;# 
   454     0016                     	;# 
   455     0017                     	;# 
   456     0018                     	;# 
   457     0019                     	;# 
   458     001A                     	;# 
   459     001B                     	;# 
   460     001C                     	;# 
   461     001E                     	;# 
   462     001F                     	;# 
   463     008C                     	;# 
   464     008D                     	;# 
   465     0091                     	;# 
   466     0092                     	;# 
   467     0095                     	;# 
   468     0096                     	;# 
   469     0097                     	;# 
   470     0098                     	;# 
   471     0099                     	;# 
   472     009A                     	;# 
   473     009B                     	;# 
   474     009B                     	;# 
   475     009C                     	;# 
   476     009D                     	;# 
   477     009E                     	;# 
   478     010C                     	;# 
   479     010D                     	;# 
   480     0111                     	;# 
   481     0112                     	;# 
   482     0113                     	;# 
   483     0114                     	;# 
   484     0115                     	;# 
   485     0116                     	;# 
   486     0117                     	;# 
   487     0118                     	;# 
   488     0119                     	;# 
   489     011A                     	;# 
   490     011B                     	;# 
   491     011D                     	;# 
   492     011E                     	;# 
   493     018C                     	;# 
   494     018D                     	;# 
   495     0191                     	;# 
   496     0191                     	;# 
   497     0192                     	;# 
   498     0193                     	;# 
   499     0193                     	;# 
   500     0193                     	;# 
   501     0194                     	;# 
   502     0195                     	;# 
   503     0196                     	;# 
   504     0199                     	;# 
   505     019A                     	;# 
   506     019B                     	;# 
   507     019B                     	;# 
   508     019B                     	;# 
   509     019B                     	;# 
   510     019C                     	;# 
   511     019C                     	;# 
   512     019D                     	;# 
   513     019E                     	;# 
   514     019F                     	;# 
   515     020C                     	;# 
   516     020D                     	;# 
   517     0211                     	;# 
   518     0211                     	;# 
   519     0212                     	;# 
   520     0212                     	;# 
   521     0213                     	;# 
   522     0213                     	;# 
   523     0214                     	;# 
   524     0214                     	;# 
   525     0215                     	;# 
   526     0215                     	;# 
   527     0215                     	;# 
   528     0216                     	;# 
   529     0216                     	;# 
   530     0217                     	;# 
   531     0217                     	;# 
   532     0291                     	;# 
   533     0291                     	;# 
   534     0292                     	;# 
   535     0293                     	;# 
   536     0294                     	;# 
   537     0295                     	;# 
   538     0295                     	;# 
   539     0296                     	;# 
   540     0394                     	;# 
   541     0395                     	;# 
   542     0396                     	;# 
   543     039A                     	;# 
   544     039C                     	;# 
   545     039D                     	;# 
   546     039E                     	;# 
   547     039F                     	;# 
   548     0FE4                     	;# 
   549     0FE5                     	;# 
   550     0FE6                     	;# 
   551     0FE7                     	;# 
   552     0FE8                     	;# 
   553     0FE9                     	;# 
   554     0FEA                     	;# 
   555     0FEB                     	;# 
   556     0FED                     	;# 
   557     0FEE                     	;# 
   558     0FEF                     	;# 
   559     0000                     	;# 
   560     0001                     	;# 
   561     0002                     	;# 
   562     0003                     	;# 
   563     0004                     	;# 
   564     0005                     	;# 
   565     0006                     	;# 
   566     0007                     	;# 
   567     0008                     	;# 
   568     0009                     	;# 
   569     000A                     	;# 
   570     000B                     	;# 
   571     000C                     	;# 
   572     000D                     	;# 
   573     0011                     	;# 
   574     0012                     	;# 
   575     0015                     	;# 
   576     0016                     	;# 
   577     0016                     	;# 
   578     0017                     	;# 
   579     0018                     	;# 
   580     0019                     	;# 
   581     001A                     	;# 
   582     001B                     	;# 
   583     001C                     	;# 
   584     001E                     	;# 
   585     001F                     	;# 
   586     008C                     	;# 
   587     008D                     	;# 
   588     0091                     	;# 
   589     0092                     	;# 
   590     0095                     	;# 
   591     0096                     	;# 
   592     0097                     	;# 
   593     0098                     	;# 
   594     0099                     	;# 
   595     009A                     	;# 
   596     009B                     	;# 
   597     009B                     	;# 
   598     009C                     	;# 
   599     009D                     	;# 
   600     009E                     	;# 
   601     010C                     	;# 
   602     010D                     	;# 
   603     0111                     	;# 
   604     0112                     	;# 
   605     0113                     	;# 
   606     0114                     	;# 
   607     0115                     	;# 
   608     0116                     	;# 
   609     0117                     	;# 
   610     0118                     	;# 
   611     0119                     	;# 
   612     011A                     	;# 
   613     011B                     	;# 
   614     011D                     	;# 
   615     011E                     	;# 
   616     018C                     	;# 
   617     018D                     	;# 
   618     0191                     	;# 
   619     0191                     	;# 
   620     0192                     	;# 
   621     0193                     	;# 
   622     0193                     	;# 
   623     0193                     	;# 
   624     0194                     	;# 
   625     0195                     	;# 
   626     0196                     	;# 
   627     0199                     	;# 
   628     019A                     	;# 
   629     019B                     	;# 
   630     019B                     	;# 
   631     019B                     	;# 
   632     019B                     	;# 
   633     019C                     	;# 
   634     019C                     	;# 
   635     019D                     	;# 
   636     019E                     	;# 
   637     019F                     	;# 
   638     020C                     	;# 
   639     020D                     	;# 
   640     0211                     	;# 
   641     0211                     	;# 
   642     0212                     	;# 
   643     0212                     	;# 
   644     0213                     	;# 
   645     0213                     	;# 
   646     0214                     	;# 
   647     0214                     	;# 
   648     0215                     	;# 
   649     0215                     	;# 
   650     0215                     	;# 
   651     0216                     	;# 
   652     0216                     	;# 
   653     0217                     	;# 
   654     0217                     	;# 
   655     0291                     	;# 
   656     0291                     	;# 
   657     0292                     	;# 
   658     0293                     	;# 
   659     0294                     	;# 
   660     0295                     	;# 
   661     0295                     	;# 
   662     0296                     	;# 
   663     0394                     	;# 
   664     0395                     	;# 
   665     0396                     	;# 
   666     039A                     	;# 
   667     039C                     	;# 
   668     039D                     	;# 
   669     039E                     	;# 
   670     039F                     	;# 
   671     0FE4                     	;# 
   672     0FE5                     	;# 
   673     0FE6                     	;# 
   674     0FE7                     	;# 
   675     0FE8                     	;# 
   676     0FE9                     	;# 
   677     0FEA                     	;# 
   678     0FEB                     	;# 
   679     0FED                     	;# 
   680     0FEE                     	;# 
   681     0FEF                     	;# 
   682     0000                     	;# 
   683     0001                     	;# 
   684     0002                     	;# 
   685     0003                     	;# 
   686     0004                     	;# 
   687     0005                     	;# 
   688     0006                     	;# 
   689     0007                     	;# 
   690     0008                     	;# 
   691     0009                     	;# 
   692     000A                     	;# 
   693     000B                     	;# 
   694     000C                     	;# 
   695     000D                     	;# 
   696     0011                     	;# 
   697     0012                     	;# 
   698     0015                     	;# 
   699     0016                     	;# 
   700     0016                     	;# 
   701     0017                     	;# 
   702     0018                     	;# 
   703     0019                     	;# 
   704     001A                     	;# 
   705     001B                     	;# 
   706     001C                     	;# 
   707     001E                     	;# 
   708     001F                     	;# 
   709     008C                     	;# 
   710     008D                     	;# 
   711     0091                     	;# 
   712     0092                     	;# 
   713     0095                     	;# 
   714     0096                     	;# 
   715     0097                     	;# 
   716     0098                     	;# 
   717     0099                     	;# 
   718     009A                     	;# 
   719     009B                     	;# 
   720     009B                     	;# 
   721     009C                     	;# 
   722     009D                     	;# 
   723     009E                     	;# 
   724     010C                     	;# 
   725     010D                     	;# 
   726     0111                     	;# 
   727     0112                     	;# 
   728     0113                     	;# 
   729     0114                     	;# 
   730     0115                     	;# 
   731     0116                     	;# 
   732     0117                     	;# 
   733     0118                     	;# 
   734     0119                     	;# 
   735     011A                     	;# 
   736     011B                     	;# 
   737     011D                     	;# 
   738     011E                     	;# 
   739     018C                     	;# 
   740     018D                     	;# 
   741     0191                     	;# 
   742     0191                     	;# 
   743     0192                     	;# 
   744     0193                     	;# 
   745     0193                     	;# 
   746     0193                     	;# 
   747     0194                     	;# 
   748     0195                     	;# 
   749     0196                     	;# 
   750     0199                     	;# 
   751     019A                     	;# 
   752     019B                     	;# 
   753     019B                     	;# 
   754     019B                     	;# 
   755     019B                     	;# 
   756     019C                     	;# 
   757     019C                     	;# 
   758     019D                     	;# 
   759     019E                     	;# 
   760     019F                     	;# 
   761     020C                     	;# 
   762     020D                     	;# 
   763     0211                     	;# 
   764     0211                     	;# 
   765     0212                     	;# 
   766     0212                     	;# 
   767     0213                     	;# 
   768     0213                     	;# 
   769     0214                     	;# 
   770     0214                     	;# 
   771     0215                     	;# 
   772     0215                     	;# 
   773     0215                     	;# 
   774     0216                     	;# 
   775     0216                     	;# 
   776     0217                     	;# 
   777     0217                     	;# 
   778     0291                     	;# 
   779     0291                     	;# 
   780     0292                     	;# 
   781     0293                     	;# 
   782     0294                     	;# 
   783     0295                     	;# 
   784     0295                     	;# 
   785     0296                     	;# 
   786     0394                     	;# 
   787     0395                     	;# 
   788     0396                     	;# 
   789     039A                     	;# 
   790     039C                     	;# 
   791     039D                     	;# 
   792     039E                     	;# 
   793     039F                     	;# 
   794     0FE4                     	;# 
   795     0FE5                     	;# 
   796     0FE6                     	;# 
   797     0FE7                     	;# 
   798     0FE8                     	;# 
   799     0FE9                     	;# 
   800     0FEA                     	;# 
   801     0FEB                     	;# 
   802     0FED                     	;# 
   803     0FEE                     	;# 
   804     0FEF                     	;# 
   805                           
   806 ;; Function _TMR1_DefaultInterruptHandler is unused but had its address taken
   807     0000                     
   808 ;; Function _EUSART_Receive_ISR is unused but had its address taken
   809     0000                     
   810 ;; Function _EUSART_DefaultFramingErrorHandler is unused but had its address taken
   811     0000                     
   812 ;; Function _EUSART_DefaultOverrunErrorHandler is unused but had its address taken
   813     0000                     
   814 ;; Function _EUSART_DefaultErrorHandler is unused but had its address taken
   815     0000                     
   816                           	psect	idataBANK0
   817     0729                     __pidataBANK0:
   818                           
   819                           ;initializer for _HChar
   820     0729  3401               	retlw	1
   821     072A  3400               	retlw	0
   822     072B  3401               	retlw	1
   823     072C  3401               	retlw	1
   824     072D  3401               	retlw	1
   825     072E  3401               	retlw	1
   826     072F  3401               	retlw	1
   827     0730  3400               	retlw	0
   828     0731  3401               	retlw	1
   829                           
   830                           ;initializer for _LChar
   831     0732  3401               	retlw	1
   832     0733  3400               	retlw	0
   833     0734  3400               	retlw	0
   834     0735  3401               	retlw	1
   835     0736  3400               	retlw	0
   836     0737  3400               	retlw	0
   837     0738  3401               	retlw	1
   838     0739  3401               	retlw	1
   839     073A  3401               	retlw	1
   840                           
   841                           ;initializer for _IChar
   842     073B  3401               	retlw	1
   843     073C  3401               	retlw	1
   844     073D  3401               	retlw	1
   845     073E  3400               	retlw	0
   846     073F  3401               	retlw	1
   847     0740  3400               	retlw	0
   848     0741  3401               	retlw	1
   849     0742  3401               	retlw	1
   850     0743  3401               	retlw	1
   851                           
   852                           ;initializer for _CChar
   853     0744  3401               	retlw	1
   854     0745  3401               	retlw	1
   855     0746  3401               	retlw	1
   856     0747  3401               	retlw	1
   857     0748  3400               	retlw	0
   858     0749  3400               	retlw	0
   859     074A  3401               	retlw	1
   860     074B  3401               	retlw	1
   861     074C  3401               	retlw	1
   862                           
   863                           ;initializer for _rows
   864     074D  3403               	retlw	3
   865                           
   866                           ;initializer for _TChar
   867     074E  3401               	retlw	1
   868     074F  3401               	retlw	1
   869     0750  3401               	retlw	1
   870     0751  3400               	retlw	0
   871     0752  3401               	retlw	1
   872     0753  3400               	retlw	0
   873     0754  3400               	retlw	0
   874     0755  3401               	retlw	1
   875     0756  3400               	retlw	0
   876                           
   877                           	psect	nvBANK0
   878     0068                     __pnvBANK0:
   879     0068                     _EUSART_ErrorHandler:
   880     0068                     	ds	2
   881     006A                     _EUSART_OverrunErrorHandler:
   882     006A                     	ds	2
   883     006C                     _EUSART_FramingErrorHandler:
   884     006C                     	ds	2
   885     006E                     _TMR1_InterruptHandler:
   886     006E                     	ds	2
   887                           
   888                           	psect	nvBANK1
   889     00A0                     __pnvBANK1:
   890     00A0                     _EUSART_RxDefaultInterruptHandler:
   891     00A0                     	ds	2
   892     000B                     _INTCONbits	set	11
   893     0019                     _T1GCONbits	set	25
   894     0018                     _T1CONbits	set	24
   895     0018                     _T1CON	set	24
   896     0011                     _PIR1bits	set	17
   897     0016                     _TMR1L	set	22
   898     0017                     _TMR1H	set	23
   899     0019                     _T1GCON	set	25
   900     0091                     _PIE1bits	set	145
   901     0097                     _WDTCON	set	151
   902     0098                     _OSCTUNE	set	152
   903     0099                     _OSCCON	set	153
   904     0095                     _OPTION_REGbits	set	149
   905     008D                     _TRISB	set	141
   906     008C                     _TRISA	set	140
   907     010C                     _LATAbits	set	268
   908     0116                     _BORCON	set	278
   909     011E                     _APFCON1	set	286
   910     011D                     _APFCON0	set	285
   911     010D                     _LATB	set	269
   912     010C                     _LATA	set	268
   913     0199                     _RCREG	set	409
   914     019A                     _TXREG	set	410
   915     019D                     _RCSTAbits	set	413
   916     019E                     _TXSTAbits	set	414
   917     019C                     _SPBRGH	set	412
   918     019B                     _SPBRGL	set	411
   919     019E                     _TXSTA	set	414
   920     019D                     _RCSTA	set	413
   921     019F                     _BAUDCON	set	415
   922     018C                     _ANSELA	set	396
   923     018D                     _ANSELB	set	397
   924     020C                     _WPUA	set	524
   925     020D                     _WPUB	set	525
   926                           
   927                           	psect	cinit
   928     07EE                     start_initialization:	
   929                           ; #config settings
   930                           
   931     07EE                     __initialization:
   932                           
   933                           ; Initialize objects allocated to BANK0
   934     07EE  3029               	movlw	low __pidataBANK0
   935     07EF  0084               	movwf	4
   936     07F0  3087               	movlw	(high __pidataBANK0)| (0+128)
   937     07F1  0085               	movwf	5
   938     07F2  3020               	movlw	low __pdataBANK0
   939     07F3  0086               	movwf	6
   940     07F4  3000               	movlw	high __pdataBANK0
   941     07F5  0087               	movwf	7
   942     07F6  302E               	movlw	46
   943     07F7  2696               	fcall	init_ram
   944                           
   945                           ; Clear objects allocated to BANK0
   946     07F8  304E               	movlw	low __pbssBANK0
   947     07F9  0084               	movwf	4
   948     07FA  3000               	movlw	high __pbssBANK0
   949     07FB  0085               	movwf	5
   950     07FC  301A               	movlw	26
   951     07FD  2690               	fcall	clear_ram0
   952     07FE                     end_of_initialization:	
   953                           ;End of C runtime variable initialization code
   954                           
   955     07FE                     __end_of__initialization:
   956     07FE  0020               	movlb	0
   957     07FF  2F57               	ljmp	_main	;jump to C main() function
   958                           
   959                           	psect	bssBANK0
   960     004E                     __pbssBANK0:
   961     004E                     _eusartRxStatusBuffer:
   962     004E                     	ds	8
   963     0056                     _eusartRxBuffer:
   964     0056                     	ds	8
   965     005E                     _timer1ReloadVal:
   966     005E                     	ds	2
   967     0060                     _column:
   968     0060                     	ds	1
   969     0061                     _ColData:
   970     0061                     	ds	1
   971     0062                     _AccessLine:
   972     0062                     	ds	1
   973     0063                     _NewDataFlag:
   974     0063                     	ds	1
   975     0064                     _eusartRxLastError:
   976     0064                     	ds	1
   977     0065                     _eusartRxCount:
   978     0065                     	ds	1
   979     0066                     _eusartRxTail:
   980     0066                     	ds	1
   981     0067                     _eusartRxHead:
   982     0067                     	ds	1
   983                           
   984                           	psect	dataBANK0
   985     0020                     __pdataBANK0:
   986     0020                     _HChar:
   987     0020                     	ds	9
   988     0029                     _LChar:
   989     0029                     	ds	9
   990     0032                     _IChar:
   991     0032                     	ds	9
   992     003B                     _CChar:
   993     003B                     	ds	9
   994     0044                     _rows:
   995     0044                     	ds	1
   996     0045                     _TChar:
   997     0045                     	ds	9
   998                           
   999                           	psect	inittext
  1000     0696                     init_ram:
  1001     0696  00FE               	movwf	126
  1002     0697                     initloop:
  1003     0697  0012               	moviw fsr0++
  1004     0698  001E               	movwi fsr1++
  1005     0699  0BFE               	decfsz	126,f
  1006     069A  2E97               	goto	initloop
  1007     069B  3400               	retlw	0
  1008                           
  1009                           	psect	clrtext
  1010     0690                     clear_ram0:	
  1011                           ;	Called with FSR0 containing the base address, and
  1012                           ;	WREG with the size to clear
  1013                           
  1014     0690  0064               	clrwdt	;clear the watchdog before getting into this loop
  1015     0691                     clrloop0:
  1016     0691  0180               	clrf	0	;clear RAM location pointed to by FSR
  1017     0692  3101               	addfsr 0,1
  1018     0693  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1019     0694  2E91               	goto	clrloop0	;have we reached the end yet?
  1020     0695  3400               	retlw	0	;all done for this memory range, return
  1021                           
  1022                           	psect	cstackCOMMON
  1023     0070                     __pcstackCOMMON:
  1024     0070                     ?_OSCILLATOR_Initialize:
  1025     0070                     ??_OSCILLATOR_Initialize:	
  1026                           ; 1 bytes @ 0x0
  1027                           
  1028     0070                     ?_WDT_Initialize:	
  1029                           ; 1 bytes @ 0x0
  1030                           
  1031     0070                     ??_WDT_Initialize:	
  1032                           ; 1 bytes @ 0x0
  1033                           
  1034     0070                     ?_TMR1_Initialize:	
  1035                           ; 1 bytes @ 0x0
  1036                           
  1037     0070                     ?_EUSART_Initialize:	
  1038                           ; 1 bytes @ 0x0
  1039                           
  1040     0070                     ?_TMR1_SetInterruptHandler:	
  1041                           ; 1 bytes @ 0x0
  1042                           
  1043     0070                     ?_EUSART_SetRxInterruptHandler:	
  1044                           ; 1 bytes @ 0x0
  1045                           
  1046     0070                     ?_EUSART_SetFramingErrorHandler:	
  1047                           ; 1 bytes @ 0x0
  1048                           
  1049     0070                     ?_EUSART_SetOverrunErrorHandler:	
  1050                           ; 1 bytes @ 0x0
  1051                           
  1052     0070                     ?_EUSART_SetErrorHandler:	
  1053                           ; 1 bytes @ 0x0
  1054                           
  1055     0070                     ?_PIN_MANAGER_Initialize:	
  1056                           ; 1 bytes @ 0x0
  1057                           
  1058     0070                     ??_PIN_MANAGER_Initialize:	
  1059                           ; 1 bytes @ 0x0
  1060                           
  1061     0070                     ?_SYSTEM_Initialize:	
  1062                           ; 1 bytes @ 0x0
  1063                           
  1064     0070                     ?_TMR1_StartTimer:	
  1065                           ; 1 bytes @ 0x0
  1066                           
  1067     0070                     ??_TMR1_StartTimer:	
  1068                           ; 1 bytes @ 0x0
  1069                           
  1070     0070                     ?_EUSART_is_tx_done:	
  1071                           ; 1 bytes @ 0x0
  1072                           
  1073     0070                     ??_EUSART_is_tx_done:	
  1074                           ; 1 bytes @ 0x0
  1075                           
  1076     0070                     ?_EUSART_Write:	
  1077                           ; 1 bytes @ 0x0
  1078                           
  1079     0070                     ??_EUSART_Write:	
  1080                           ; 1 bytes @ 0x0
  1081                           
  1082     0070                     ?_main:	
  1083                           ; 1 bytes @ 0x0
  1084                           
  1085     0070                     ?___bmul:	
  1086                           ; 1 bytes @ 0x0
  1087                           
  1088     0070                     EUSART_Write@txData:	
  1089                           ; 1 bytes @ 0x0
  1090                           
  1091     0070                     ___bmul@multiplicand:	
  1092                           ; 1 bytes @ 0x0
  1093                           
  1094     0070                     TMR1_SetInterruptHandler@InterruptHandler:	
  1095                           ; 1 bytes @ 0x0
  1096                           
  1097     0070                     EUSART_SetFramingErrorHandler@interruptHandler:	
  1098                           ; 2 bytes @ 0x0
  1099                           
  1100     0070                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  1101                           ; 2 bytes @ 0x0
  1102                           
  1103     0070                     EUSART_SetErrorHandler@interruptHandler:	
  1104                           ; 2 bytes @ 0x0
  1105                           
  1106     0070                     EUSART_SetRxInterruptHandler@interruptHandler:	
  1107                           ; 2 bytes @ 0x0
  1108                           
  1109                           
  1110                           ; 2 bytes @ 0x0
  1111     0070                     	ds	1
  1112     0071                     ??___bmul:
  1113                           
  1114                           ; 1 bytes @ 0x1
  1115     0071                     	ds	1
  1116     0072                     ??_TMR1_Initialize:
  1117     0072                     ??_EUSART_Initialize:	
  1118                           ; 1 bytes @ 0x2
  1119                           
  1120     0072                     ??_TMR1_SetInterruptHandler:	
  1121                           ; 1 bytes @ 0x2
  1122                           
  1123     0072                     ??_EUSART_SetRxInterruptHandler:	
  1124                           ; 1 bytes @ 0x2
  1125                           
  1126     0072                     ??_EUSART_SetFramingErrorHandler:	
  1127                           ; 1 bytes @ 0x2
  1128                           
  1129     0072                     ??_EUSART_SetOverrunErrorHandler:	
  1130                           ; 1 bytes @ 0x2
  1131                           
  1132     0072                     ??_EUSART_SetErrorHandler:	
  1133                           ; 1 bytes @ 0x2
  1134                           
  1135     0072                     ??_SYSTEM_Initialize:	
  1136                           ; 1 bytes @ 0x2
  1137                           
  1138     0072                     ___bmul@product:	
  1139                           ; 1 bytes @ 0x2
  1140                           
  1141                           
  1142                           ; 1 bytes @ 0x2
  1143     0072                     	ds	1
  1144     0073                     ___bmul@multiplier:
  1145                           
  1146                           ; 1 bytes @ 0x3
  1147     0073                     	ds	1
  1148     0074                     ?_GrabCol:
  1149     0074                     GrabCol@rows:	
  1150                           ; 1 bytes @ 0x4
  1151                           
  1152                           
  1153                           ; 2 bytes @ 0x4
  1154     0074                     	ds	2
  1155     0076                     GrabCol@column:
  1156                           
  1157                           ; 1 bytes @ 0x6
  1158     0076                     	ds	1
  1159     0077                     GrabCol@matrix:
  1160                           
  1161                           ; 1 bytes @ 0x7
  1162     0077                     	ds	1
  1163     0078                     GrabCol@ColData:
  1164                           
  1165                           ; 1 bytes @ 0x8
  1166     0078                     	ds	1
  1167     0079                     ??_GrabCol:
  1168                           
  1169                           ; 1 bytes @ 0x9
  1170     0079                     	ds	2
  1171     007B                     GrabCol@i:
  1172                           
  1173                           ; 1 bytes @ 0xB
  1174     007B                     	ds	1
  1175     007C                     ??_main:
  1176                           
  1177                           ; 1 bytes @ 0xC
  1178     007C                     	ds	2
  1179                           
  1180                           	psect	maintext
  1181     0757                     __pmaintext:	
  1182 ;;
  1183 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1184 ;;
  1185 ;; *************** function _main *****************
  1186 ;; Defined at:
  1187 ;;		line 92 in file "main.c"
  1188 ;; Parameters:    Size  Location     Type
  1189 ;;		None
  1190 ;; Auto vars:     Size  Location     Type
  1191 ;;		None
  1192 ;; Return value:  Size  Location     Type
  1193 ;;                  1    wreg      void 
  1194 ;; Registers used:
  1195 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1196 ;; Tracked objects:
  1197 ;;		On entry : B1F/0
  1198 ;;		On exit  : 0/0
  1199 ;;		Unchanged: 0/0
  1200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1201 ;;      Params:         0       0       0       0
  1202 ;;      Locals:         0       0       0       0
  1203 ;;      Temps:          2       0       0       0
  1204 ;;      Totals:         2       0       0       0
  1205 ;;Total ram usage:        2 bytes
  1206 ;; Hardware stack levels required when called: 3
  1207 ;; This function calls:
  1208 ;;		_EUSART_Initialize
  1209 ;;		_EUSART_Write
  1210 ;;		_EUSART_is_tx_done
  1211 ;;		_GrabCol
  1212 ;;		_SYSTEM_Initialize
  1213 ;;		_TMR1_Initialize
  1214 ;;		_TMR1_StartTimer
  1215 ;; This function is called by:
  1216 ;;		Startup code after reset
  1217 ;; This function uses a non-reentrant model
  1218 ;;
  1219                           
  1220     0757                     _main:	
  1221                           ;psect for function _main
  1222                           
  1223                           
  1224                           ;main.c: 94:     SYSTEM_Initialize();
  1225                           
  1226                           ;incstack = 0
  1227                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1228     0757  268A               	fcall	_SYSTEM_Initialize
  1229                           
  1230                           ;main.c: 96:     EUSART_Initialize();
  1231     0758  2701               	fcall	_EUSART_Initialize
  1232                           
  1233                           ;main.c: 98:     TMR1_Initialize();
  1234     0759  26EB               	fcall	_TMR1_Initialize
  1235                           
  1236                           ;main.c: 104:     (INTCONbits.GIE = 1);
  1237     075A  178B               	bsf	11,7	;volatile
  1238                           
  1239                           ;main.c: 107:     (INTCONbits.PEIE = 1);
  1240     075B  170B               	bsf	11,6	;volatile
  1241                           
  1242                           ;main.c: 116:     TMR1_StartTimer();
  1243     075C  2661               	fcall	_TMR1_StartTimer
  1244     075D                     l1457:
  1245                           
  1246                           ;main.c: 119:         if(NewDataFlag == 1){
  1247     075D  0020               	movlb	0	; select bank0
  1248     075E  0363               	decf	_NewDataFlag,w
  1249     075F  1903               	btfsc	3,2
  1250     0760  2FD8               	goto	l1497
  1251     0761  2F5D               	goto	l1457
  1252     0762                     l297:	
  1253                           ;main.c: 124:                     do { LATAbits.LATA4 = 1; } while(0);
  1254                           
  1255     0762  0022               	movlb	2	; select bank2
  1256     0763  160C               	bsf	12,4	;volatile
  1257                           
  1258                           ;main.c: 125:                     do { LATAbits.LATA2 = 1; } while(0);
  1259     0764  150C               	bsf	12,2	;volatile
  1260                           
  1261                           ;main.c: 127:                     AccessLine = 0b10000000;
  1262     0765  3080               	movlw	128
  1263     0766  0020               	movlb	0	; select bank0
  1264     0767  00E2               	movwf	_AccessLine
  1265                           
  1266                           ;main.c: 128:                     GrabCol(rows, column, TChar, ColData);
  1267     0768  3003               	movlw	3
  1268     0769  00F4               	movwf	GrabCol@rows
  1269     076A  3000               	movlw	0
  1270     076B  00F5               	movwf	GrabCol@rows+1
  1271     076C  0860               	movf	_column,w
  1272     076D  00F6               	movwf	GrabCol@column
  1273     076E  3045               	movlw	(low (_TChar| 0))& (0+255)
  1274     076F  00F7               	movwf	GrabCol@matrix
  1275     0770  01F8               	clrf	GrabCol@ColData
  1276     0771  26BF               	fcall	_GrabCol
  1277                           
  1278                           ;main.c: 129:                     EUSART_Write(AccessLine);
  1279     0772  3080               	movlw	128
  1280     0773  26A3               	fcall	_EUSART_Write
  1281     0774                     l1467:	
  1282                           ;main.c: 130:                     while(!EUSART_is_tx_done());
  1283                           
  1284     0774  2664               	fcall	_EUSART_is_tx_done
  1285     0775  3A00               	xorlw	0
  1286     0776  1903               	skipnz
  1287     0777  2F74               	goto	l1467
  1288                           
  1289                           ;main.c: 131:                     EUSART_Write(ColData);
  1290     0778  3000               	movlw	0
  1291     0779  26A3               	fcall	_EUSART_Write
  1292     077A                     l1471:	
  1293                           ;main.c: 132:                     while(!EUSART_is_tx_done());
  1294                           
  1295     077A  2664               	fcall	_EUSART_is_tx_done
  1296     077B  3A00               	xorlw	0
  1297     077C  1903               	skipnz
  1298     077D  2F7A               	goto	l1471
  1299                           
  1300                           ;main.c: 134:                     do { LATAbits.LATA1 = 1; } while(0);
  1301     077E  0022               	movlb	2	; select bank2
  1302     077F  148C               	bsf	12,1	;volatile
  1303                           
  1304                           ;main.c: 135:                     do { LATAbits.LATA3 = 0; } while(0);
  1305     0780  118C               	bcf	12,3	;volatile
  1306                           
  1307                           ;main.c: 136:                     _delay((unsigned long)((100)*(250000/4000000.0)));
  1308     0781  3200               	nop2	;2 cycle nop
  1309     0782  3200               	nop2	;2 cycle nop
  1310     0783  3200               	nop2	;2 cycle nop
  1311                           
  1312                           ;main.c: 138:                     do { LATAbits.LATA1 = 0; } while(0);
  1313     0784  0022               	movlb	2	; select bank2
  1314     0785  108C               	bcf	12,1	;volatile
  1315                           
  1316                           ;main.c: 139:                     do { LATAbits.LATA3 = 1; } while(0);
  1317     0786  158C               	bsf	12,3	;volatile
  1318                           
  1319                           ;main.c: 141:                     do { LATAbits.LATA4 = 0; } while(0);
  1320     0787  120C               	bcf	12,4	;volatile
  1321                           
  1322                           ;main.c: 142:                     do { LATAbits.LATA2 = 0; } while(0);
  1323     0788  110C               	bcf	12,2	;volatile
  1324     0789                     l320:	
  1325                           ;main.c: 145:                     do { LATAbits.LATA4 = 1; } while(0);
  1326                           
  1327     0789  0022               	movlb	2	; select bank2
  1328     078A  160C               	bsf	12,4	;volatile
  1329                           
  1330                           ;main.c: 146:                     do { LATAbits.LATA2 = 1; } while(0);
  1331     078B  150C               	bsf	12,2	;volatile
  1332                           
  1333                           ;main.c: 148:                     AccessLine = 0b01000000;
  1334     078C  3040               	movlw	64
  1335     078D  0020               	movlb	0	; select bank0
  1336     078E  00E2               	movwf	_AccessLine
  1337                           
  1338                           ;main.c: 149:                     GrabCol(rows, column, TChar, ColData);
  1339     078F  3003               	movlw	3
  1340     0790  00F4               	movwf	GrabCol@rows
  1341     0791  3000               	movlw	0
  1342     0792  00F5               	movwf	GrabCol@rows+1
  1343     0793  0860               	movf	_column,w
  1344     0794  00F6               	movwf	GrabCol@column
  1345     0795  3045               	movlw	(low (_TChar| 0))& (0+255)
  1346     0796  00F7               	movwf	GrabCol@matrix
  1347     0797  01F8               	clrf	GrabCol@ColData
  1348     0798  26BF               	fcall	_GrabCol
  1349                           
  1350                           ;main.c: 150:                     EUSART_Write(AccessLine);
  1351     0799  3040               	movlw	64
  1352     079A  26A3               	fcall	_EUSART_Write
  1353     079B                     l1479:	
  1354                           ;main.c: 151:                     while(!EUSART_is_tx_done());
  1355                           
  1356     079B  2664               	fcall	_EUSART_is_tx_done
  1357     079C  3A00               	xorlw	0
  1358     079D  1903               	skipnz
  1359     079E  2F9B               	goto	l1479
  1360                           
  1361                           ;main.c: 152:                     EUSART_Write(ColData);
  1362     079F  3000               	movlw	0
  1363     07A0  26A3               	fcall	_EUSART_Write
  1364     07A1                     l1483:	
  1365                           ;main.c: 153:                     while(!EUSART_is_tx_done());
  1366                           
  1367     07A1  2664               	fcall	_EUSART_is_tx_done
  1368     07A2  3A00               	xorlw	0
  1369     07A3  1903               	skipnz
  1370     07A4  2FA1               	goto	l1483
  1371                           
  1372                           ;main.c: 155:                     do { LATAbits.LATA1 = 1; } while(0);
  1373     07A5  0022               	movlb	2	; select bank2
  1374     07A6  148C               	bsf	12,1	;volatile
  1375                           
  1376                           ;main.c: 156:                     do { LATAbits.LATA3 = 0; } while(0);
  1377     07A7  118C               	bcf	12,3	;volatile
  1378                           
  1379                           ;main.c: 157:                     _delay((unsigned long)((100)*(250000/4000000.0)));
  1380     07A8  3200               	nop2	;2 cycle nop
  1381     07A9  3200               	nop2	;2 cycle nop
  1382     07AA  3200               	nop2	;2 cycle nop
  1383                           
  1384                           ;main.c: 159:                     do { LATAbits.LATA1 = 0; } while(0);
  1385     07AB  0022               	movlb	2	; select bank2
  1386     07AC  108C               	bcf	12,1	;volatile
  1387                           
  1388                           ;main.c: 160:                     do { LATAbits.LATA3 = 1; } while(0);
  1389     07AD  158C               	bsf	12,3	;volatile
  1390                           
  1391                           ;main.c: 162:                     do { LATAbits.LATA4 = 0; } while(0);
  1392     07AE  120C               	bcf	12,4	;volatile
  1393                           
  1394                           ;main.c: 163:                     do { LATAbits.LATA2 = 0; } while(0);
  1395     07AF  110C               	bcf	12,2	;volatile
  1396     07B0                     l343:	
  1397                           ;main.c: 166:                     do { LATAbits.LATA4 = 1; } while(0);
  1398                           
  1399     07B0  0022               	movlb	2	; select bank2
  1400     07B1  160C               	bsf	12,4	;volatile
  1401                           
  1402                           ;main.c: 167:                     do { LATAbits.LATA2 = 1; } while(0);
  1403     07B2  150C               	bsf	12,2	;volatile
  1404                           
  1405                           ;main.c: 169:                     AccessLine = 0b00100000;
  1406     07B3  3020               	movlw	32
  1407     07B4  0020               	movlb	0	; select bank0
  1408     07B5  00E2               	movwf	_AccessLine
  1409                           
  1410                           ;main.c: 170:                     GrabCol(rows, column, TChar, ColData);
  1411     07B6  3003               	movlw	3
  1412     07B7  00F4               	movwf	GrabCol@rows
  1413     07B8  3000               	movlw	0
  1414     07B9  00F5               	movwf	GrabCol@rows+1
  1415     07BA  0860               	movf	_column,w
  1416     07BB  00F6               	movwf	GrabCol@column
  1417     07BC  3045               	movlw	(low (_TChar| 0))& (0+255)
  1418     07BD  00F7               	movwf	GrabCol@matrix
  1419     07BE  01F8               	clrf	GrabCol@ColData
  1420     07BF  26BF               	fcall	_GrabCol
  1421                           
  1422                           ;main.c: 171:                     EUSART_Write(AccessLine);
  1423     07C0  3020               	movlw	32
  1424     07C1  26A3               	fcall	_EUSART_Write
  1425     07C2                     l1491:	
  1426                           ;main.c: 172:                     while(!EUSART_is_tx_done());
  1427                           
  1428     07C2  2664               	fcall	_EUSART_is_tx_done
  1429     07C3  3A00               	xorlw	0
  1430     07C4  1903               	skipnz
  1431     07C5  2FC2               	goto	l1491
  1432                           
  1433                           ;main.c: 173:                     EUSART_Write(ColData);
  1434     07C6  3000               	movlw	0
  1435     07C7  26A3               	fcall	_EUSART_Write
  1436     07C8                     l1495:	
  1437                           ;main.c: 174:                     while(!EUSART_is_tx_done());
  1438                           
  1439     07C8  2664               	fcall	_EUSART_is_tx_done
  1440     07C9  3A00               	xorlw	0
  1441     07CA  1903               	skipnz
  1442     07CB  2FC8               	goto	l1495
  1443                           
  1444                           ;main.c: 176:                     do { LATAbits.LATA1 = 1; } while(0);
  1445     07CC  0022               	movlb	2	; select bank2
  1446     07CD  148C               	bsf	12,1	;volatile
  1447                           
  1448                           ;main.c: 177:                     do { LATAbits.LATA3 = 0; } while(0);
  1449     07CE  118C               	bcf	12,3	;volatile
  1450                           
  1451                           ;main.c: 178:                     _delay((unsigned long)((100)*(250000/4000000.0)));
  1452     07CF  3200               	nop2	;2 cycle nop
  1453     07D0  3200               	nop2	;2 cycle nop
  1454     07D1  3200               	nop2	;2 cycle nop
  1455                           
  1456                           ;main.c: 180:                     do { LATAbits.LATA1 = 0; } while(0);
  1457     07D2  0022               	movlb	2	; select bank2
  1458     07D3  108C               	bcf	12,1	;volatile
  1459                           
  1460                           ;main.c: 181:                     do { LATAbits.LATA3 = 1; } while(0);
  1461     07D4  158C               	bsf	12,3	;volatile
  1462                           
  1463                           ;main.c: 183:                     do { LATAbits.LATA4 = 0; } while(0);
  1464     07D5  120C               	bcf	12,4	;volatile
  1465                           
  1466                           ;main.c: 184:                     do { LATAbits.LATA2 = 0; } while(0);
  1467     07D6  110C               	bcf	12,2	;volatile
  1468     07D7  2FEB               	goto	l1499
  1469     07D8                     l1497:
  1470     07D8  0860               	movf	_column,w
  1471     07D9  00FC               	movwf	??_main
  1472     07DA  01FD               	clrf	??_main+1
  1473                           
  1474                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1475                           ; Switch size 1, requested type "simple"
  1476                           ; Number of cases is 1, Range of values is 0 to 0
  1477                           ; switch strategies available:
  1478                           ; Name         Instructions Cycles
  1479                           ; simple_byte            4     3 (average)
  1480                           ; direct_byte            8     6 (fixed)
  1481                           ; jumptable            260     6 (fixed)
  1482                           ;	Chosen strategy is simple_byte
  1483     07DB  087D               	movf	??_main+1,w
  1484     07DC  3A00               	xorlw	0	; case 0
  1485     07DD  1903               	skipnz
  1486     07DE  2FE0               	goto	l1541
  1487     07DF  2FEB               	goto	l1499
  1488     07E0                     l1541:
  1489                           
  1490                           ; Switch size 1, requested type "simple"
  1491                           ; Number of cases is 3, Range of values is 0 to 2
  1492                           ; switch strategies available:
  1493                           ; Name         Instructions Cycles
  1494                           ; simple_byte           10     6 (average)
  1495                           ; direct_byte           12     6 (fixed)
  1496                           ; jumptable            260     6 (fixed)
  1497                           ;	Chosen strategy is simple_byte
  1498     07E0  087C               	movf	??_main,w
  1499     07E1  3A00               	xorlw	0	; case 0
  1500     07E2  1903               	skipnz
  1501     07E3  2F62               	goto	l297
  1502     07E4  3A01               	xorlw	1	; case 1
  1503     07E5  1903               	skipnz
  1504     07E6  2F89               	goto	l320
  1505     07E7  3A03               	xorlw	3	; case 2
  1506     07E8  1903               	skipnz
  1507     07E9  2FB0               	goto	l343
  1508     07EA  2FEB               	goto	l1499
  1509     07EB                     l1499:
  1510                           
  1511                           ;main.c: 187:             NewDataFlag = 0;
  1512     07EB  0020               	movlb	0	; select bank0
  1513     07EC  01E3               	clrf	_NewDataFlag
  1514     07ED  2F5D               	goto	l1457
  1515     07EE                     __end_of_main:
  1516                           
  1517                           	psect	text1
  1518     0661                     __ptext1:	
  1519 ;; *************** function _TMR1_StartTimer *****************
  1520 ;; Defined at:
  1521 ;;		line 93 in file "mcc_generated_files/tmr1.c"
  1522 ;; Parameters:    Size  Location     Type
  1523 ;;		None
  1524 ;; Auto vars:     Size  Location     Type
  1525 ;;		None
  1526 ;; Return value:  Size  Location     Type
  1527 ;;                  1    wreg      void 
  1528 ;; Registers used:
  1529 ;;		None
  1530 ;; Tracked objects:
  1531 ;;		On entry : 0/0
  1532 ;;		On exit  : 0/0
  1533 ;;		Unchanged: 0/0
  1534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1535 ;;      Params:         0       0       0       0
  1536 ;;      Locals:         0       0       0       0
  1537 ;;      Temps:          0       0       0       0
  1538 ;;      Totals:         0       0       0       0
  1539 ;;Total ram usage:        0 bytes
  1540 ;; Hardware stack levels used: 1
  1541 ;; This function calls:
  1542 ;;		Nothing
  1543 ;; This function is called by:
  1544 ;;		_main
  1545 ;; This function uses a non-reentrant model
  1546 ;;
  1547                           
  1548     0661                     _TMR1_StartTimer:	
  1549                           ;psect for function _TMR1_StartTimer
  1550                           
  1551                           
  1552                           ;mcc_generated_files/tmr1.c: 96:     T1CONbits.TMR1ON = 1;
  1553                           
  1554                           ;incstack = 0
  1555                           ; Regs used in _TMR1_StartTimer: []
  1556     0661  0020               	movlb	0	; select bank0
  1557     0662  1418               	bsf	24,0	;volatile
  1558     0663  0008               	return
  1559     0664                     __end_of_TMR1_StartTimer:
  1560                           
  1561                           	psect	text2
  1562     068A                     __ptext2:	
  1563 ;; *************** function _SYSTEM_Initialize *****************
  1564 ;; Defined at:
  1565 ;;		line 50 in file "mcc_generated_files/mcc.c"
  1566 ;; Parameters:    Size  Location     Type
  1567 ;;		None
  1568 ;; Auto vars:     Size  Location     Type
  1569 ;;		None
  1570 ;; Return value:  Size  Location     Type
  1571 ;;                  1    wreg      void 
  1572 ;; Registers used:
  1573 ;;		wreg, status,2, status,0, pclath, cstack
  1574 ;; Tracked objects:
  1575 ;;		On entry : 0/0
  1576 ;;		On exit  : 0/0
  1577 ;;		Unchanged: 0/0
  1578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1579 ;;      Params:         0       0       0       0
  1580 ;;      Locals:         0       0       0       0
  1581 ;;      Temps:          0       0       0       0
  1582 ;;      Totals:         0       0       0       0
  1583 ;;Total ram usage:        0 bytes
  1584 ;; Hardware stack levels used: 1
  1585 ;; Hardware stack levels required when called: 2
  1586 ;; This function calls:
  1587 ;;		_EUSART_Initialize
  1588 ;;		_OSCILLATOR_Initialize
  1589 ;;		_PIN_MANAGER_Initialize
  1590 ;;		_TMR1_Initialize
  1591 ;;		_WDT_Initialize
  1592 ;; This function is called by:
  1593 ;;		_main
  1594 ;; This function uses a non-reentrant model
  1595 ;;
  1596                           
  1597     068A                     _SYSTEM_Initialize:	
  1598                           ;psect for function _SYSTEM_Initialize
  1599                           
  1600                           
  1601                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  1602                           
  1603                           ;incstack = 0
  1604                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  1605     068A  26D5               	fcall	_PIN_MANAGER_Initialize
  1606                           
  1607                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  1608     068B  269C               	fcall	_OSCILLATOR_Initialize
  1609                           
  1610                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  1611     068C  2668               	fcall	_WDT_Initialize
  1612                           
  1613                           ;mcc_generated_files/mcc.c: 56:     TMR1_Initialize();
  1614     068D  26EB               	fcall	_TMR1_Initialize
  1615                           
  1616                           ;mcc_generated_files/mcc.c: 57:     EUSART_Initialize();
  1617     068E  2701               	fcall	_EUSART_Initialize
  1618     068F  0008               	return
  1619     0690                     __end_of_SYSTEM_Initialize:
  1620                           
  1621                           	psect	text3
  1622     0668                     __ptext3:	
  1623 ;; *************** function _WDT_Initialize *****************
  1624 ;; Defined at:
  1625 ;;		line 70 in file "mcc_generated_files/mcc.c"
  1626 ;; Parameters:    Size  Location     Type
  1627 ;;		None
  1628 ;; Auto vars:     Size  Location     Type
  1629 ;;		None
  1630 ;; Return value:  Size  Location     Type
  1631 ;;                  1    wreg      void 
  1632 ;; Registers used:
  1633 ;;		wreg
  1634 ;; Tracked objects:
  1635 ;;		On entry : 0/0
  1636 ;;		On exit  : 0/0
  1637 ;;		Unchanged: 0/0
  1638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1639 ;;      Params:         0       0       0       0
  1640 ;;      Locals:         0       0       0       0
  1641 ;;      Temps:          0       0       0       0
  1642 ;;      Totals:         0       0       0       0
  1643 ;;Total ram usage:        0 bytes
  1644 ;; Hardware stack levels used: 1
  1645 ;; This function calls:
  1646 ;;		Nothing
  1647 ;; This function is called by:
  1648 ;;		_SYSTEM_Initialize
  1649 ;; This function uses a non-reentrant model
  1650 ;;
  1651                           
  1652     0668                     _WDT_Initialize:	
  1653                           ;psect for function _WDT_Initialize
  1654                           
  1655                           
  1656                           ;mcc_generated_files/mcc.c: 73:     WDTCON = 0x16;
  1657                           
  1658                           ;incstack = 0
  1659                           ; Regs used in _WDT_Initialize: [wreg]
  1660     0668  3016               	movlw	22
  1661     0669  0021               	movlb	1	; select bank1
  1662     066A  0097               	movwf	23	;volatile
  1663     066B  0008               	return
  1664     066C                     __end_of_WDT_Initialize:
  1665                           
  1666                           	psect	text4
  1667     06EB                     __ptext4:	
  1668 ;; *************** function _TMR1_Initialize *****************
  1669 ;; Defined at:
  1670 ;;		line 64 in file "mcc_generated_files/tmr1.c"
  1671 ;; Parameters:    Size  Location     Type
  1672 ;;		None
  1673 ;; Auto vars:     Size  Location     Type
  1674 ;;		None
  1675 ;; Return value:  Size  Location     Type
  1676 ;;                  1    wreg      void 
  1677 ;; Registers used:
  1678 ;;		wreg, status,2, status,0, pclath, cstack
  1679 ;; Tracked objects:
  1680 ;;		On entry : 0/0
  1681 ;;		On exit  : 0/0
  1682 ;;		Unchanged: 0/0
  1683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1684 ;;      Params:         0       0       0       0
  1685 ;;      Locals:         0       0       0       0
  1686 ;;      Temps:          0       0       0       0
  1687 ;;      Totals:         0       0       0       0
  1688 ;;Total ram usage:        0 bytes
  1689 ;; Hardware stack levels used: 1
  1690 ;; Hardware stack levels required when called: 1
  1691 ;; This function calls:
  1692 ;;		_TMR1_SetInterruptHandler
  1693 ;; This function is called by:
  1694 ;;		_SYSTEM_Initialize
  1695 ;;		_main
  1696 ;; This function uses a non-reentrant model
  1697 ;;
  1698                           
  1699     06EB                     _TMR1_Initialize:	
  1700                           ;psect for function _TMR1_Initialize
  1701                           
  1702                           
  1703                           ;mcc_generated_files/tmr1.c: 69:     T1GCON = 0x00;
  1704                           
  1705                           ;incstack = 0
  1706                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  1707     06EB  0020               	movlb	0	; select bank0
  1708     06EC  0199               	clrf	25	;volatile
  1709                           
  1710                           ;mcc_generated_files/tmr1.c: 72:     TMR1H = 0xFC;
  1711     06ED  30FC               	movlw	252
  1712     06EE  0097               	movwf	23	;volatile
  1713                           
  1714                           ;mcc_generated_files/tmr1.c: 75:     TMR1L = 0x18;
  1715     06EF  3018               	movlw	24
  1716     06F0  0096               	movwf	22	;volatile
  1717                           
  1718                           ;mcc_generated_files/tmr1.c: 78:     PIR1bits.TMR1IF = 0;
  1719     06F1  1011               	bcf	17,0	;volatile
  1720                           
  1721                           ;mcc_generated_files/tmr1.c: 81:     timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
  1722     06F2  0817               	movf	23,w	;volatile
  1723     06F3  00DF               	movwf	_timer1ReloadVal+1	;volatile
  1724     06F4  0816               	movf	22,w	;volatile
  1725     06F5  00DE               	movwf	_timer1ReloadVal	;volatile
  1726                           
  1727                           ;mcc_generated_files/tmr1.c: 84:     PIE1bits.TMR1IE = 1;
  1728     06F6  0021               	movlb	1	; select bank1
  1729     06F7  1411               	bsf	17,0	;volatile
  1730                           
  1731                           ;mcc_generated_files/tmr1.c: 87:     TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandl
      +                          er);
  1732     06F8  3000               	movlw	0
  1733     06F9  00F0               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  1734     06FA  3000               	movlw	0
  1735     06FB  00F1               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  1736     06FC  2684               	fcall	_TMR1_SetInterruptHandler
  1737                           
  1738                           ;mcc_generated_files/tmr1.c: 90:     T1CON = 0x01;
  1739     06FD  3001               	movlw	1
  1740     06FE  0020               	movlb	0	; select bank0
  1741     06FF  0098               	movwf	24	;volatile
  1742     0700  0008               	return
  1743     0701                     __end_of_TMR1_Initialize:
  1744                           
  1745                           	psect	text5
  1746     0684                     __ptext5:	
  1747 ;; *************** function _TMR1_SetInterruptHandler *****************
  1748 ;; Defined at:
  1749 ;;		line 177 in file "mcc_generated_files/tmr1.c"
  1750 ;; Parameters:    Size  Location     Type
  1751 ;;  InterruptHan    2    0[COMMON] PTR FTN()void 
  1752 ;;		 -> TMR1_DefaultInterruptHandler(1), 
  1753 ;; Auto vars:     Size  Location     Type
  1754 ;;		None
  1755 ;; Return value:  Size  Location     Type
  1756 ;;                  1    wreg      void 
  1757 ;; Registers used:
  1758 ;;		wreg
  1759 ;; Tracked objects:
  1760 ;;		On entry : 0/0
  1761 ;;		On exit  : 0/0
  1762 ;;		Unchanged: 0/0
  1763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1764 ;;      Params:         2       0       0       0
  1765 ;;      Locals:         0       0       0       0
  1766 ;;      Temps:          0       0       0       0
  1767 ;;      Totals:         2       0       0       0
  1768 ;;Total ram usage:        2 bytes
  1769 ;; Hardware stack levels used: 1
  1770 ;; This function calls:
  1771 ;;		Nothing
  1772 ;; This function is called by:
  1773 ;;		_TMR1_Initialize
  1774 ;; This function uses a non-reentrant model
  1775 ;;
  1776                           
  1777     0684                     _TMR1_SetInterruptHandler:	
  1778                           ;psect for function _TMR1_SetInterruptHandler
  1779                           
  1780                           
  1781                           ;mcc_generated_files/tmr1.c: 178:     TMR1_InterruptHandler = InterruptHandler;
  1782                           
  1783                           ;incstack = 0
  1784                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
  1785     0684  0871               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
  1786     0685  0020               	movlb	0	; select bank0
  1787     0686  00EF               	movwf	_TMR1_InterruptHandler+1
  1788     0687  0870               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
  1789     0688  00EE               	movwf	_TMR1_InterruptHandler
  1790     0689  0008               	return
  1791     068A                     __end_of_TMR1_SetInterruptHandler:
  1792                           
  1793                           	psect	text6
  1794     06D5                     __ptext6:	
  1795 ;; *************** function _PIN_MANAGER_Initialize *****************
  1796 ;; Defined at:
  1797 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  1798 ;; Parameters:    Size  Location     Type
  1799 ;;		None
  1800 ;; Auto vars:     Size  Location     Type
  1801 ;;		None
  1802 ;; Return value:  Size  Location     Type
  1803 ;;                  1    wreg      void 
  1804 ;; Registers used:
  1805 ;;		wreg, status,2
  1806 ;; Tracked objects:
  1807 ;;		On entry : 0/0
  1808 ;;		On exit  : 0/0
  1809 ;;		Unchanged: 0/0
  1810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1811 ;;      Params:         0       0       0       0
  1812 ;;      Locals:         0       0       0       0
  1813 ;;      Temps:          0       0       0       0
  1814 ;;      Totals:         0       0       0       0
  1815 ;;Total ram usage:        0 bytes
  1816 ;; Hardware stack levels used: 1
  1817 ;; This function calls:
  1818 ;;		Nothing
  1819 ;; This function is called by:
  1820 ;;		_SYSTEM_Initialize
  1821 ;; This function uses a non-reentrant model
  1822 ;;
  1823                           
  1824     06D5                     _PIN_MANAGER_Initialize:	
  1825                           ;psect for function _PIN_MANAGER_Initialize
  1826                           
  1827                           
  1828                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x1D;
  1829                           
  1830                           ;incstack = 0
  1831                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  1832     06D5  301D               	movlw	29
  1833     06D6  0022               	movlb	2	; select bank2
  1834     06D7  008C               	movwf	12	;volatile
  1835                           
  1836                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x00;
  1837     06D8  018D               	clrf	13	;volatile
  1838                           
  1839                           ;mcc_generated_files/pin_manager.c: 66:     TRISA = 0xE0;
  1840     06D9  30E0               	movlw	224
  1841     06DA  0021               	movlb	1	; select bank1
  1842     06DB  008C               	movwf	12	;volatile
  1843                           
  1844                           ;mcc_generated_files/pin_manager.c: 67:     TRISB = 0xFF;
  1845     06DC  30FF               	movlw	255
  1846     06DD  008D               	movwf	13	;volatile
  1847                           
  1848                           ;mcc_generated_files/pin_manager.c: 72:     ANSELB = 0xF8;
  1849     06DE  30F8               	movlw	248
  1850     06DF  0023               	movlb	3	; select bank3
  1851     06E0  008D               	movwf	13	;volatile
  1852                           
  1853                           ;mcc_generated_files/pin_manager.c: 73:     ANSELA = 0x00;
  1854     06E1  018C               	clrf	12	;volatile
  1855                           
  1856                           ;mcc_generated_files/pin_manager.c: 78:     WPUB = 0x00;
  1857     06E2  0024               	movlb	4	; select bank4
  1858     06E3  018D               	clrf	13	;volatile
  1859                           
  1860                           ;mcc_generated_files/pin_manager.c: 79:     WPUA = 0x00;
  1861     06E4  018C               	clrf	12	;volatile
  1862                           
  1863                           ;mcc_generated_files/pin_manager.c: 80:     OPTION_REGbits.nWPUEN = 1;
  1864     06E5  0021               	movlb	1	; select bank1
  1865     06E6  1795               	bsf	21,7	;volatile
  1866                           
  1867                           ;mcc_generated_files/pin_manager.c: 86:     APFCON0 = 0x00;
  1868     06E7  0022               	movlb	2	; select bank2
  1869     06E8  019D               	clrf	29	;volatile
  1870                           
  1871                           ;mcc_generated_files/pin_manager.c: 87:     APFCON1 = 0x00;
  1872     06E9  019E               	clrf	30	;volatile
  1873     06EA  0008               	return
  1874     06EB                     __end_of_PIN_MANAGER_Initialize:
  1875                           
  1876                           	psect	text7
  1877     069C                     __ptext7:	
  1878 ;; *************** function _OSCILLATOR_Initialize *****************
  1879 ;; Defined at:
  1880 ;;		line 60 in file "mcc_generated_files/mcc.c"
  1881 ;; Parameters:    Size  Location     Type
  1882 ;;		None
  1883 ;; Auto vars:     Size  Location     Type
  1884 ;;		None
  1885 ;; Return value:  Size  Location     Type
  1886 ;;                  1    wreg      void 
  1887 ;; Registers used:
  1888 ;;		wreg, status,2
  1889 ;; Tracked objects:
  1890 ;;		On entry : 0/0
  1891 ;;		On exit  : 0/0
  1892 ;;		Unchanged: 0/0
  1893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1894 ;;      Params:         0       0       0       0
  1895 ;;      Locals:         0       0       0       0
  1896 ;;      Temps:          0       0       0       0
  1897 ;;      Totals:         0       0       0       0
  1898 ;;Total ram usage:        0 bytes
  1899 ;; Hardware stack levels used: 1
  1900 ;; This function calls:
  1901 ;;		Nothing
  1902 ;; This function is called by:
  1903 ;;		_SYSTEM_Initialize
  1904 ;; This function uses a non-reentrant model
  1905 ;;
  1906                           
  1907     069C                     _OSCILLATOR_Initialize:	
  1908                           ;psect for function _OSCILLATOR_Initialize
  1909                           
  1910                           
  1911                           ;mcc_generated_files/mcc.c: 63:     OSCCON = 0x48;
  1912                           
  1913                           ;incstack = 0
  1914                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  1915     069C  3048               	movlw	72
  1916     069D  0021               	movlb	1	; select bank1
  1917     069E  0099               	movwf	25	;volatile
  1918                           
  1919                           ;mcc_generated_files/mcc.c: 65:     OSCTUNE = 0x00;
  1920     069F  0198               	clrf	24	;volatile
  1921                           
  1922                           ;mcc_generated_files/mcc.c: 67:     BORCON = 0x00;
  1923     06A0  0022               	movlb	2	; select bank2
  1924     06A1  0196               	clrf	22	;volatile
  1925     06A2  0008               	return
  1926     06A3                     __end_of_OSCILLATOR_Initialize:
  1927                           
  1928                           	psect	text8
  1929     0701                     __ptext8:	
  1930 ;; *************** function _EUSART_Initialize *****************
  1931 ;; Defined at:
  1932 ;;		line 81 in file "mcc_generated_files/eusart.c"
  1933 ;; Parameters:    Size  Location     Type
  1934 ;;		None
  1935 ;; Auto vars:     Size  Location     Type
  1936 ;;		None
  1937 ;; Return value:  Size  Location     Type
  1938 ;;                  1    wreg      void 
  1939 ;; Registers used:
  1940 ;;		wreg, status,2, status,0, pclath, cstack
  1941 ;; Tracked objects:
  1942 ;;		On entry : 0/0
  1943 ;;		On exit  : 0/0
  1944 ;;		Unchanged: 0/0
  1945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1946 ;;      Params:         0       0       0       0
  1947 ;;      Locals:         0       0       0       0
  1948 ;;      Temps:          0       0       0       0
  1949 ;;      Totals:         0       0       0       0
  1950 ;;Total ram usage:        0 bytes
  1951 ;; Hardware stack levels used: 1
  1952 ;; Hardware stack levels required when called: 1
  1953 ;; This function calls:
  1954 ;;		_EUSART_SetErrorHandler
  1955 ;;		_EUSART_SetFramingErrorHandler
  1956 ;;		_EUSART_SetOverrunErrorHandler
  1957 ;;		_EUSART_SetRxInterruptHandler
  1958 ;; This function is called by:
  1959 ;;		_SYSTEM_Initialize
  1960 ;;		_main
  1961 ;; This function uses a non-reentrant model
  1962 ;;
  1963                           
  1964     0701                     _EUSART_Initialize:	
  1965                           ;psect for function _EUSART_Initialize
  1966                           
  1967                           
  1968                           ;mcc_generated_files/eusart.c: 84:     PIE1bits.RCIE = 0;
  1969                           
  1970                           ;incstack = 0
  1971                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  1972     0701  0021               	movlb	1	; select bank1
  1973     0702  1291               	bcf	17,5	;volatile
  1974                           
  1975                           ;mcc_generated_files/eusart.c: 85:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  1976     0703  3000               	movlw	0
  1977     0704  00F0               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  1978     0705  3000               	movlw	0
  1979     0706  00F1               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  1980     0707  267E               	fcall	_EUSART_SetRxInterruptHandler
  1981                           
  1982                           ;mcc_generated_files/eusart.c: 89:     BAUDCON = 0x08;
  1983     0708  3008               	movlw	8
  1984     0709  0023               	movlb	3	; select bank3
  1985     070A  009F               	movwf	31	;volatile
  1986                           
  1987                           ;mcc_generated_files/eusart.c: 92:     RCSTA = 0x80;
  1988     070B  3080               	movlw	128
  1989     070C  009D               	movwf	29	;volatile
  1990                           
  1991                           ;mcc_generated_files/eusart.c: 95:     TXSTA = 0xB4;
  1992     070D  30B4               	movlw	180
  1993     070E  009E               	movwf	30	;volatile
  1994                           
  1995                           ;mcc_generated_files/eusart.c: 98:     SPBRGL = 0x06;
  1996     070F  3006               	movlw	6
  1997     0710  009B               	movwf	27	;volatile
  1998                           
  1999                           ;mcc_generated_files/eusart.c: 101:     SPBRGH = 0x00;
  2000     0711  019C               	clrf	28	;volatile
  2001                           
  2002                           ;mcc_generated_files/eusart.c: 104:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
  2003     0712  3000               	movlw	0
  2004     0713  00F0               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  2005     0714  3000               	movlw	0
  2006     0715  00F1               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  2007     0716  2672               	fcall	_EUSART_SetFramingErrorHandler
  2008                           
  2009                           ;mcc_generated_files/eusart.c: 105:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
  2010     0717  3000               	movlw	0
  2011     0718  00F0               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  2012     0719  3000               	movlw	0
  2013     071A  00F1               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  2014     071B  2678               	fcall	_EUSART_SetOverrunErrorHandler
  2015                           
  2016                           ;mcc_generated_files/eusart.c: 106:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
  2017     071C  3000               	movlw	0
  2018     071D  00F0               	movwf	EUSART_SetErrorHandler@interruptHandler
  2019     071E  3000               	movlw	0
  2020     071F  00F1               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  2021     0720  266C               	fcall	_EUSART_SetErrorHandler
  2022                           
  2023                           ;mcc_generated_files/eusart.c: 108:     eusartRxLastError.status = 0;
  2024     0721  0020               	movlb	0	; select bank0
  2025     0722  01E4               	clrf	_eusartRxLastError	;volatile
  2026                           
  2027                           ;mcc_generated_files/eusart.c: 111:     eusartRxHead = 0;
  2028     0723  01E7               	clrf	_eusartRxHead	;volatile
  2029                           
  2030                           ;mcc_generated_files/eusart.c: 112:     eusartRxTail = 0;
  2031     0724  01E6               	clrf	_eusartRxTail	;volatile
  2032                           
  2033                           ;mcc_generated_files/eusart.c: 113:     eusartRxCount = 0;
  2034     0725  01E5               	clrf	_eusartRxCount	;volatile
  2035                           
  2036                           ;mcc_generated_files/eusart.c: 116:     PIE1bits.RCIE = 1;
  2037     0726  0021               	movlb	1	; select bank1
  2038     0727  1691               	bsf	17,5	;volatile
  2039     0728  0008               	return
  2040     0729                     __end_of_EUSART_Initialize:
  2041                           
  2042                           	psect	text9
  2043     067E                     __ptext9:	
  2044 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  2045 ;; Defined at:
  2046 ;;		line 233 in file "mcc_generated_files/eusart.c"
  2047 ;; Parameters:    Size  Location     Type
  2048 ;;  interruptHan    2    0[COMMON] PTR FTN()void 
  2049 ;;		 -> EUSART_Receive_ISR(1), 
  2050 ;; Auto vars:     Size  Location     Type
  2051 ;;		None
  2052 ;; Return value:  Size  Location     Type
  2053 ;;                  1    wreg      void 
  2054 ;; Registers used:
  2055 ;;		wreg
  2056 ;; Tracked objects:
  2057 ;;		On entry : 0/0
  2058 ;;		On exit  : 0/0
  2059 ;;		Unchanged: 0/0
  2060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2061 ;;      Params:         2       0       0       0
  2062 ;;      Locals:         0       0       0       0
  2063 ;;      Temps:          0       0       0       0
  2064 ;;      Totals:         2       0       0       0
  2065 ;;Total ram usage:        2 bytes
  2066 ;; Hardware stack levels used: 1
  2067 ;; This function calls:
  2068 ;;		Nothing
  2069 ;; This function is called by:
  2070 ;;		_EUSART_Initialize
  2071 ;; This function uses a non-reentrant model
  2072 ;;
  2073                           
  2074     067E                     _EUSART_SetRxInterruptHandler:	
  2075                           ;psect for function _EUSART_SetRxInterruptHandler
  2076                           
  2077                           
  2078                           ;mcc_generated_files/eusart.c: 234:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
  2079                           
  2080                           ;incstack = 0
  2081                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  2082     067E  0871               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
  2083     067F  0021               	movlb	1	; select bank1
  2084     0680  00A1               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128)
  2085     0681  0870               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
  2086     0682  00A0               	movwf	_EUSART_RxDefaultInterruptHandler^(0+128)
  2087     0683  0008               	return
  2088     0684                     __end_of_EUSART_SetRxInterruptHandler:
  2089                           
  2090                           	psect	text10
  2091     0678                     __ptext10:	
  2092 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  2093 ;; Defined at:
  2094 ;;		line 224 in file "mcc_generated_files/eusart.c"
  2095 ;; Parameters:    Size  Location     Type
  2096 ;;  interruptHan    2    0[COMMON] PTR FTN()void 
  2097 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  2098 ;; Auto vars:     Size  Location     Type
  2099 ;;		None
  2100 ;; Return value:  Size  Location     Type
  2101 ;;                  1    wreg      void 
  2102 ;; Registers used:
  2103 ;;		wreg
  2104 ;; Tracked objects:
  2105 ;;		On entry : 0/0
  2106 ;;		On exit  : 0/0
  2107 ;;		Unchanged: 0/0
  2108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2109 ;;      Params:         2       0       0       0
  2110 ;;      Locals:         0       0       0       0
  2111 ;;      Temps:          0       0       0       0
  2112 ;;      Totals:         2       0       0       0
  2113 ;;Total ram usage:        2 bytes
  2114 ;; Hardware stack levels used: 1
  2115 ;; This function calls:
  2116 ;;		Nothing
  2117 ;; This function is called by:
  2118 ;;		_EUSART_Initialize
  2119 ;; This function uses a non-reentrant model
  2120 ;;
  2121                           
  2122     0678                     _EUSART_SetOverrunErrorHandler:	
  2123                           ;psect for function _EUSART_SetOverrunErrorHandler
  2124                           
  2125                           
  2126                           ;mcc_generated_files/eusart.c: 225:     EUSART_OverrunErrorHandler = interruptHandler;
  2127                           
  2128                           ;incstack = 0
  2129                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  2130     0678  0871               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
  2131     0679  0020               	movlb	0	; select bank0
  2132     067A  00EB               	movwf	_EUSART_OverrunErrorHandler+1
  2133     067B  0870               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  2134     067C  00EA               	movwf	_EUSART_OverrunErrorHandler
  2135     067D  0008               	return
  2136     067E                     __end_of_EUSART_SetOverrunErrorHandler:
  2137                           
  2138                           	psect	text11
  2139     0672                     __ptext11:	
  2140 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  2141 ;; Defined at:
  2142 ;;		line 220 in file "mcc_generated_files/eusart.c"
  2143 ;; Parameters:    Size  Location     Type
  2144 ;;  interruptHan    2    0[COMMON] PTR FTN()void 
  2145 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  2146 ;; Auto vars:     Size  Location     Type
  2147 ;;		None
  2148 ;; Return value:  Size  Location     Type
  2149 ;;                  1    wreg      void 
  2150 ;; Registers used:
  2151 ;;		wreg
  2152 ;; Tracked objects:
  2153 ;;		On entry : 0/0
  2154 ;;		On exit  : 0/0
  2155 ;;		Unchanged: 0/0
  2156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2157 ;;      Params:         2       0       0       0
  2158 ;;      Locals:         0       0       0       0
  2159 ;;      Temps:          0       0       0       0
  2160 ;;      Totals:         2       0       0       0
  2161 ;;Total ram usage:        2 bytes
  2162 ;; Hardware stack levels used: 1
  2163 ;; This function calls:
  2164 ;;		Nothing
  2165 ;; This function is called by:
  2166 ;;		_EUSART_Initialize
  2167 ;; This function uses a non-reentrant model
  2168 ;;
  2169                           
  2170     0672                     _EUSART_SetFramingErrorHandler:	
  2171                           ;psect for function _EUSART_SetFramingErrorHandler
  2172                           
  2173                           
  2174                           ;mcc_generated_files/eusart.c: 221:     EUSART_FramingErrorHandler = interruptHandler;
  2175                           
  2176                           ;incstack = 0
  2177                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  2178     0672  0871               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
  2179     0673  0020               	movlb	0	; select bank0
  2180     0674  00ED               	movwf	_EUSART_FramingErrorHandler+1
  2181     0675  0870               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  2182     0676  00EC               	movwf	_EUSART_FramingErrorHandler
  2183     0677  0008               	return
  2184     0678                     __end_of_EUSART_SetFramingErrorHandler:
  2185                           
  2186                           	psect	text12
  2187     066C                     __ptext12:	
  2188 ;; *************** function _EUSART_SetErrorHandler *****************
  2189 ;; Defined at:
  2190 ;;		line 228 in file "mcc_generated_files/eusart.c"
  2191 ;; Parameters:    Size  Location     Type
  2192 ;;  interruptHan    2    0[COMMON] PTR FTN()void 
  2193 ;;		 -> EUSART_DefaultErrorHandler(1), 
  2194 ;; Auto vars:     Size  Location     Type
  2195 ;;		None
  2196 ;; Return value:  Size  Location     Type
  2197 ;;                  1    wreg      void 
  2198 ;; Registers used:
  2199 ;;		wreg
  2200 ;; Tracked objects:
  2201 ;;		On entry : 0/0
  2202 ;;		On exit  : 0/0
  2203 ;;		Unchanged: 0/0
  2204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2205 ;;      Params:         2       0       0       0
  2206 ;;      Locals:         0       0       0       0
  2207 ;;      Temps:          0       0       0       0
  2208 ;;      Totals:         2       0       0       0
  2209 ;;Total ram usage:        2 bytes
  2210 ;; Hardware stack levels used: 1
  2211 ;; This function calls:
  2212 ;;		Nothing
  2213 ;; This function is called by:
  2214 ;;		_EUSART_Initialize
  2215 ;; This function uses a non-reentrant model
  2216 ;;
  2217                           
  2218     066C                     _EUSART_SetErrorHandler:	
  2219                           ;psect for function _EUSART_SetErrorHandler
  2220                           
  2221                           
  2222                           ;mcc_generated_files/eusart.c: 229:     EUSART_ErrorHandler = interruptHandler;
  2223                           
  2224                           ;incstack = 0
  2225                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  2226     066C  0871               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
  2227     066D  0020               	movlb	0	; select bank0
  2228     066E  00E9               	movwf	_EUSART_ErrorHandler+1
  2229     066F  0870               	movf	EUSART_SetErrorHandler@interruptHandler,w
  2230     0670  00E8               	movwf	_EUSART_ErrorHandler
  2231     0671  0008               	return
  2232     0672                     __end_of_EUSART_SetErrorHandler:
  2233                           
  2234                           	psect	text13
  2235     06BF                     __ptext13:	
  2236 ;; *************** function _GrabCol *****************
  2237 ;; Defined at:
  2238 ;;		line 86 in file "main.c"
  2239 ;; Parameters:    Size  Location     Type
  2240 ;;  rows            2    4[COMMON] unsigned short 
  2241 ;;  column          1    6[COMMON] unsigned char 
  2242 ;;  matrix          1    7[COMMON] PTR unsigned char [3]
  2243 ;;		 -> TChar(9), 
  2244 ;;  ColData         1    8[COMMON] unsigned char 
  2245 ;; Auto vars:     Size  Location     Type
  2246 ;;  i               1   11[COMMON] unsigned char 
  2247 ;; Return value:  Size  Location     Type
  2248 ;;                  1    wreg      void 
  2249 ;; Registers used:
  2250 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2251 ;; Tracked objects:
  2252 ;;		On entry : 0/0
  2253 ;;		On exit  : 0/0
  2254 ;;		Unchanged: 0/0
  2255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2256 ;;      Params:         5       0       0       0
  2257 ;;      Locals:         1       0       0       0
  2258 ;;      Temps:          2       0       0       0
  2259 ;;      Totals:         8       0       0       0
  2260 ;;Total ram usage:        8 bytes
  2261 ;; Hardware stack levels used: 1
  2262 ;; Hardware stack levels required when called: 1
  2263 ;; This function calls:
  2264 ;;		___bmul
  2265 ;; This function is called by:
  2266 ;;		_main
  2267 ;; This function uses a non-reentrant model
  2268 ;;
  2269                           
  2270     06BF                     _GrabCol:	
  2271                           ;psect for function _GrabCol
  2272                           
  2273                           
  2274                           ;main.c: 87:     ColData = 0;
  2275                           
  2276                           ;incstack = 0
  2277                           ; Regs used in _GrabCol: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2278     06BF  01F8               	clrf	GrabCol@ColData
  2279                           
  2280                           ;main.c: 88:     for(uint8_t i=(rows-1);i>=0;i--){
  2281     06C0  0874               	movf	GrabCol@rows,w
  2282     06C1  3EFF               	addlw	255
  2283     06C2  00FB               	movwf	GrabCol@i
  2284     06C3                     l1397:
  2285                           
  2286                           ;main.c: 89:         ColData = ColData*(2) + matrix[i][column];
  2287     06C3  3003               	movlw	3
  2288     06C4  00F0               	movwf	___bmul@multiplicand
  2289     06C5  087B               	movf	GrabCol@i,w
  2290     06C6  26AE               	fcall	___bmul
  2291     06C7  0777               	addwf	GrabCol@matrix,w
  2292     06C8  00F9               	movwf	??_GrabCol
  2293     06C9  0876               	movf	GrabCol@column,w
  2294     06CA  0779               	addwf	??_GrabCol,w
  2295     06CB  00FA               	movwf	??_GrabCol+1
  2296     06CC  087A               	movf	??_GrabCol+1,w
  2297     06CD  0086               	movwf	6
  2298     06CE  0187               	clrf	7
  2299     06CF  3578               	lslf	GrabCol@ColData,w
  2300     06D0  0701               	addwf	1,w
  2301     06D1  00F8               	movwf	GrabCol@ColData
  2302                           
  2303                           ;main.c: 90:     }
  2304     06D2  3001               	movlw	1
  2305     06D3  02FB               	subwf	GrabCol@i,f
  2306     06D4  2EC3               	goto	l1397
  2307     06D5                     __end_of_GrabCol:
  2308                           
  2309                           	psect	text14
  2310     06AE                     __ptext14:	
  2311 ;; *************** function ___bmul *****************
  2312 ;; Defined at:
  2313 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul8.c"
  2314 ;; Parameters:    Size  Location     Type
  2315 ;;  multiplier      1    wreg     unsigned char 
  2316 ;;  multiplicand    1    0[COMMON] unsigned char 
  2317 ;; Auto vars:     Size  Location     Type
  2318 ;;  multiplier      1    3[COMMON] unsigned char 
  2319 ;;  product         1    2[COMMON] unsigned char 
  2320 ;; Return value:  Size  Location     Type
  2321 ;;                  1    wreg      unsigned char 
  2322 ;; Registers used:
  2323 ;;		wreg, status,2, status,0
  2324 ;; Tracked objects:
  2325 ;;		On entry : 0/0
  2326 ;;		On exit  : 0/0
  2327 ;;		Unchanged: 0/0
  2328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2329 ;;      Params:         1       0       0       0
  2330 ;;      Locals:         2       0       0       0
  2331 ;;      Temps:          1       0       0       0
  2332 ;;      Totals:         4       0       0       0
  2333 ;;Total ram usage:        4 bytes
  2334 ;; Hardware stack levels used: 1
  2335 ;; This function calls:
  2336 ;;		Nothing
  2337 ;; This function is called by:
  2338 ;;		_GrabCol
  2339 ;; This function uses a non-reentrant model
  2340 ;;
  2341                           
  2342     06AE                     ___bmul:	
  2343                           ;psect for function ___bmul
  2344                           
  2345                           
  2346                           ;incstack = 0
  2347                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  2348                           ;___bmul@multiplier stored from wreg
  2349     06AE  00F3               	movwf	___bmul@multiplier
  2350     06AF  01F2               	clrf	___bmul@product
  2351     06B0                     l1343:
  2352     06B0  1C73               	btfss	___bmul@multiplier,0
  2353     06B1  2EB6               	goto	l1347
  2354     06B2  0870               	movf	___bmul@multiplicand,w
  2355     06B3  00F1               	movwf	??___bmul
  2356     06B4  0871               	movf	??___bmul,w
  2357     06B5  07F2               	addwf	___bmul@product,f
  2358     06B6                     l1347:
  2359     06B6  1003               	clrc
  2360     06B7  0DF0               	rlf	___bmul@multiplicand,f
  2361     06B8  1003               	clrc
  2362     06B9  0CF3               	rrf	___bmul@multiplier,f
  2363     06BA  0873               	movf	___bmul@multiplier,w
  2364     06BB  1D03               	btfss	3,2
  2365     06BC  2EB0               	goto	l1343
  2366     06BD  0872               	movf	___bmul@product,w
  2367     06BE  0008               	return
  2368     06BF                     __end_of___bmul:
  2369                           
  2370                           	psect	text15
  2371     0664                     __ptext15:	
  2372 ;; *************** function _EUSART_is_tx_done *****************
  2373 ;; Defined at:
  2374 ;;		line 129 in file "mcc_generated_files/eusart.c"
  2375 ;; Parameters:    Size  Location     Type
  2376 ;;		None
  2377 ;; Auto vars:     Size  Location     Type
  2378 ;;		None
  2379 ;; Return value:  Size  Location     Type
  2380 ;;                  1    wreg      _Bool 
  2381 ;; Registers used:
  2382 ;;		wreg, status,2, status,0
  2383 ;; Tracked objects:
  2384 ;;		On entry : 0/0
  2385 ;;		On exit  : 0/0
  2386 ;;		Unchanged: 0/0
  2387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2388 ;;      Params:         0       0       0       0
  2389 ;;      Locals:         0       0       0       0
  2390 ;;      Temps:          0       0       0       0
  2391 ;;      Totals:         0       0       0       0
  2392 ;;Total ram usage:        0 bytes
  2393 ;; Hardware stack levels used: 1
  2394 ;; This function calls:
  2395 ;;		Nothing
  2396 ;; This function is called by:
  2397 ;;		_main
  2398 ;; This function uses a non-reentrant model
  2399 ;;
  2400                           
  2401     0664                     _EUSART_is_tx_done:	
  2402                           ;psect for function _EUSART_is_tx_done
  2403                           
  2404                           
  2405                           ;mcc_generated_files/eusart.c: 131:     return TXSTAbits.TRMT;
  2406                           
  2407                           ;incstack = 0
  2408                           ; Regs used in _EUSART_is_tx_done: [wreg+status,2+status,0]
  2409     0664  0023               	movlb	3	; select bank3
  2410     0665  0C1E               	rrf	30,w	;volatile
  2411     0666  3901               	andlw	1
  2412     0667  0008               	return
  2413     0668                     __end_of_EUSART_is_tx_done:
  2414                           
  2415                           	psect	text16
  2416     06A3                     __ptext16:	
  2417 ;; *************** function _EUSART_Write *****************
  2418 ;; Defined at:
  2419 ;;		line 161 in file "mcc_generated_files/eusart.c"
  2420 ;; Parameters:    Size  Location     Type
  2421 ;;  txData          1    wreg     unsigned char 
  2422 ;; Auto vars:     Size  Location     Type
  2423 ;;  txData          1    0[COMMON] unsigned char 
  2424 ;; Return value:  Size  Location     Type
  2425 ;;                  1    wreg      void 
  2426 ;; Registers used:
  2427 ;;		wreg
  2428 ;; Tracked objects:
  2429 ;;		On entry : 0/0
  2430 ;;		On exit  : 0/0
  2431 ;;		Unchanged: 0/0
  2432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2433 ;;      Params:         0       0       0       0
  2434 ;;      Locals:         1       0       0       0
  2435 ;;      Temps:          0       0       0       0
  2436 ;;      Totals:         1       0       0       0
  2437 ;;Total ram usage:        1 bytes
  2438 ;; Hardware stack levels used: 1
  2439 ;; This function calls:
  2440 ;;		Nothing
  2441 ;; This function is called by:
  2442 ;;		_main
  2443 ;; This function uses a non-reentrant model
  2444 ;;
  2445                           
  2446     06A3                     _EUSART_Write:	
  2447                           ;psect for function _EUSART_Write
  2448                           
  2449                           
  2450                           ;incstack = 0
  2451                           ; Regs used in _EUSART_Write: [wreg]
  2452                           ;EUSART_Write@txData stored from wreg
  2453     06A3  00F0               	movwf	EUSART_Write@txData
  2454                           
  2455                           ;mcc_generated_files/eusart.c: 161: void EUSART_Write(uint8_t txData);mcc_generated_file
      +                          s/eusart.c: 162: {;mcc_generated_files/eusart.c: 163:     RCSTAbits.SREN = 0;
  2456     06A4  0023               	movlb	3	; select bank3
  2457     06A5  129D               	bcf	29,5	;volatile
  2458                           
  2459                           ;mcc_generated_files/eusart.c: 164:     RCSTAbits.CREN = 0;
  2460     06A6  121D               	bcf	29,4	;volatile
  2461     06A7                     l200:	
  2462                           ;mcc_generated_files/eusart.c: 166:     {;mcc_generated_files/eusart.c: 167:     }
  2463                           
  2464                           
  2465                           ;mcc_generated_files/eusart.c: 165:     while(0 == PIR1bits.TXIF)
  2466     06A7  0020               	movlb	0	; select bank0
  2467     06A8  1E11               	btfss	17,4	;volatile
  2468     06A9  2EA7               	goto	l200
  2469                           
  2470                           ;mcc_generated_files/eusart.c: 169:     TXREG = txData;
  2471     06AA  0870               	movf	EUSART_Write@txData,w
  2472     06AB  0023               	movlb	3	; select bank3
  2473     06AC  009A               	movwf	26	;volatile
  2474     06AD  0008               	return
  2475     06AE                     __end_of_EUSART_Write:
  2476     007E                     btemp	set	126	;btemp
  2477     007E                     wtemp0	set	126
  2478                           
  2479                           	psect	config
  2480                           
  2481                           ;Config register CONFIG1 @ 0x8007
  2482                           ;	Oscillator Selection
  2483                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
  2484                           ;	Watchdog Timer Enable
  2485                           ;	WDTE = OFF, WDT disabled
  2486                           ;	Power-up Timer Enable
  2487                           ;	PWRTE = OFF, PWRT disabled
  2488                           ;	MCLR Pin Function Select
  2489                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
  2490                           ;	Flash Program Memory Code Protection
  2491                           ;	CP = OFF, Program memory code protection is disabled
  2492                           ;	Data Memory Code Protection
  2493                           ;	CPD = OFF, Data memory code protection is disabled
  2494                           ;	Brown-out Reset Enable
  2495                           ;	BOREN = ON, Brown-out Reset enabled
  2496                           ;	Clock Out Enable
  2497                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  2498                           ;	Internal/External Switchover
  2499                           ;	IESO = ON, Internal/External Switchover mode is enabled
  2500                           ;	Fail-Safe Clock Monitor Enable
  2501                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
  2502     8007                     	org	32775
  2503     8007  3FE4               	dw	16356
  2504                           
  2505                           ;Config register CONFIG2 @ 0x8008
  2506                           ;	Flash Memory Self-Write Protection
  2507                           ;	WRT = OFF, Write protection off
  2508                           ;	PLL Enable
  2509                           ;	PLLEN = OFF, 4x PLL disabled
  2510                           ;	Stack Overflow/Underflow Reset Enable
  2511                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
  2512                           ;	Brown-out Reset Voltage Selection
  2513                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
  2514                           ;	In-Circuit Debugger Mode
  2515                           ;	DEBUG = 0x1, unprogrammed default
  2516                           ;	Low-Voltage Programming Enable
  2517                           ;	LVP = ON, Low-voltage programming enabled
  2518     8008                     	org	32776
  2519     8008  3EFF               	dw	16127

Data Sizes:
    Strings     0
    Constant    0
    Data        46
    BSS         26
    Persistent  42
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80      0      80
    BANK1            80      0       2
    BANK2            80      0       0

Pointer List with Targets:

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), NULL(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), NULL(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), NULL(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), NULL(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    GrabCol@matrix	PTR unsigned char [3] size(1) Largest target is 9
		 -> TChar(BANK0[9]), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), NULL(), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _main->_GrabCol
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _GrabCol->___bmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    2173
                                             12 COMMON     2     2      0
                  _EUSART_Initialize
                       _EUSART_Write
                  _EUSART_is_tx_done
                            _GrabCol
                  _SYSTEM_Initialize
                    _TMR1_Initialize
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (1) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     490
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR1_Initialize                                      0     0      0      98
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _TMR1_SetInterruptHandler                             2     0      2      98
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     392
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2      98
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2      98
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2      98
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2      98
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _GrabCol                                              8     3      5    1171
                                              4 COMMON     8     3      5
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     145
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _EUSART_is_tx_done                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Write                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_Initialize
     _EUSART_SetErrorHandler
     _EUSART_SetFramingErrorHandler
     _EUSART_SetOverrunErrorHandler
     _EUSART_SetRxInterruptHandler
   _EUSART_Write
   _EUSART_is_tx_done
   _GrabCol
     ___bmul
   _SYSTEM_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _WDT_Initialize
   _TMR1_Initialize
   _TMR1_StartTimer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      60       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      0      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0       2       8        2.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      60      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Fri Nov 24 22:24:30 2023

                ?_EUSART_SetRxInterruptHandler 0070                                     _AccessLine 0062  
                               ___bmul@product 0072                                            l200 06A7  
                                          l320 0789                                            l343 07B0  
                                          l297 0762                                _timer1ReloadVal 005E  
               ?_EUSART_SetFramingErrorHandler 0070                                            wreg 0009  
                                         l1343 06B0                                           l1347 06B6  
                                         l1541 07E0                                           l1471 077A  
                                         l1457 075D                                           l1491 07C2  
                                         l1483 07A1                                           l1467 0774  
                                         l1397 06C3                                           l1495 07C8  
                                         l1479 079B                                           l1497 07D8  
                                         l1499 07EB                                           _LATA 010C  
                                         _LATB 010D                                           _WPUA 020C  
                                         _WPUB 020D                                           _main 0757  
                                         fsr0h 0005                                           fsr1h 0007  
                                         indf0 0000                                           fsr0l 0004  
                                         indf1 0001                                           fsr1l 0006  
                                         _rows 0044                                           btemp 007E  
                                         start 0001                     ??_TMR1_SetInterruptHandler 0072  
                            ___bmul@multiplier 0073                                __end_of_GrabCol 06D5  
                                ?_EUSART_Write 0070                  __end_of_OSCILLATOR_Initialize 06A3  
                                        ?_main 0070                                _TMR1_StartTimer 0661  
                                        _T1CON 0018                                          _CChar 003B  
                                        _RCREG 0199                                          _HChar 0020  
                                        _RCSTA 019D                                          _IChar 0032  
                                        _TMR1H 0017                                          _TMR1L 0016  
                                        _LChar 0029                                          _TRISA 008C  
                                        _TRISB 008D                                          _TXREG 019A  
                                        _TChar 0045                                          _TXSTA 019E  
                               _WDT_Initialize 0668                        __end_of_TMR1_Initialize 0701  
                                        status 0003                                          wtemp0 007E  
                              __initialization 07EE                                   __end_of_main 07EE  
                               ??_EUSART_Write 0070                 ??_EUSART_SetRxInterruptHandler 0072  
                                       ??_main 007C                         __end_of_WDT_Initialize 066C  
            _EUSART_DefaultFramingErrorHandler 0000                     _EUSART_OverrunErrorHandler 006A  
                                       _ANSELA 018C                                         _ANSELB 018D  
                                       _BORCON 0116                                         _T1GCON 0019  
                                       _OSCCON 0099                                         _SPBRGH 019C  
                                       _SPBRGL 019B                                         _WDTCON 0097  
                                    ??_GrabCol 0079                   _TMR1_DefaultInterruptHandler 0000  
                                       ___bmul 06AE                        __end_of_TMR1_StartTimer 0664  
                                       _column 0060                                ?_WDT_Initialize 0070  
     TMR1_SetInterruptHandler@InterruptHandler 0070                               ?_TMR1_Initialize 0070  
                            _SYSTEM_Initialize 068A                        __end_of__initialization 07FE  
                                  _NewDataFlag 0063                             ?_SYSTEM_Initialize 0070  
                          ___bmul@multiplicand 0070                                 __pcstackCOMMON 0070  
                                 __pidataBANK0 0729                            ??_SYSTEM_Initialize 0072  
                               _OPTION_REGbits 0095                           _eusartRxStatusBuffer 004E  
              ??_EUSART_SetOverrunErrorHandler 0072                      __end_of_SYSTEM_Initialize 0690  
                                   __pbssBANK0 004E                           __end_of_EUSART_Write 06AE  
                                   __pmaintext 0757                                        ?___bmul 0070  
                             ?_TMR1_StartTimer 0070                                        _BAUDCON 019F  
                                      _APFCON0 011D                                        _APFCON1 011E  
                                _eusartRxCount 0065                                        _OSCTUNE 0098  
                     ??_EUSART_SetErrorHandler 0072                                        _ColData 0061  
                                      _GrabCol 06BF                                 GrabCol@ColData 0078  
                                      __ptext1 0661                                        __ptext2 068A  
                                      __ptext3 0668                                        __ptext4 06EB  
                                      __ptext5 0684                                        __ptext6 06D5  
                                      __ptext7 069C                                        __ptext8 0701  
                                      __ptext9 067E                                      _T1CONbits 0018  
                        _OSCILLATOR_Initialize 069C                       ??_PIN_MANAGER_Initialize 0070  
                    ?_TMR1_SetInterruptHandler 0070                                        clrloop0 0691  
                         end_of_initialization 07FE          __end_of_EUSART_SetOverrunErrorHandler 067E  
                _EUSART_SetOverrunErrorHandler 0678                                        init_ram 0696  
                                      initloop 0697                              _EUSART_Initialize 0701  
                           ?_EUSART_Initialize 0070                                      _RCSTAbits 019D  
                          ??_EUSART_Initialize 0072                               ??_WDT_Initialize 0070  
                    __end_of_EUSART_Initialize 0729                                      _TXSTAbits 019E  
                               __end_of___bmul 06BF                     _EUSART_DefaultErrorHandler 0000  
                                 _EUSART_Write 06A3                         ?_OSCILLATOR_Initialize 0070  
                          start_initialization 07EE   EUSART_SetRxInterruptHandler@interruptHandler 0070  
               ?_EUSART_SetOverrunErrorHandler 0070                     _EUSART_FramingErrorHandler 006C  
                                     ??___bmul 0071                         _EUSART_SetErrorHandler 066C  
                                  __pdataBANK0 0020                                      ___latbits 0000  
                                     ?_GrabCol 0074               _EUSART_RxDefaultInterruptHandler 00A0  
                                    __pnvBANK0 0068                                      __pnvBANK1 00A0  
                       _PIN_MANAGER_Initialize 06D5               __end_of_TMR1_SetInterruptHandler 068A  
                                 _eusartRxHead 0067                                   _eusartRxTail 0066  
                               _eusartRxBuffer 0056                                       _LATAbits 010C  
                                GrabCol@column 0076         EUSART_SetErrorHandler@interruptHandler 0070  
                                GrabCol@matrix 0077                                      clear_ram0 0690  
                                     _PIE1bits 0091                              _eusartRxLastError 0064  
                                     _PIR1bits 0011                ??_EUSART_SetFramingErrorHandler 0072  
                            _EUSART_is_tx_done 0664              _EUSART_DefaultOverrunErrorHandler 0000  
                                     GrabCol@i 007B                             ?_EUSART_is_tx_done 0070  
                            ??_TMR1_Initialize 0072                            ??_EUSART_is_tx_done 0070  
                    __end_of_EUSART_is_tx_done 0668                        ??_OSCILLATOR_Initialize 0070  
                          _EUSART_ErrorHandler 0068                       _TMR1_SetInterruptHandler 0684  
                        _TMR1_InterruptHandler 006E                                       __ptext10 0678  
                                     __ptext11 0672                                       __ptext12 066C  
                                     __ptext13 06BF                                     _T1GCONbits 0019  
                                     __ptext14 06AE                                       __ptext15 0664  
                                     __ptext16 06A3                              ??_TMR1_StartTimer 0070  
                      ?_EUSART_SetErrorHandler 0070  EUSART_SetOverrunErrorHandler@interruptHandler 0070  
        __end_of_EUSART_SetFramingErrorHandler 0678                  _EUSART_SetFramingErrorHandler 0672  
                                   _INTCONbits 000B                        ?_PIN_MANAGER_Initialize 0070  
               __end_of_EUSART_SetErrorHandler 0672           __end_of_EUSART_SetRxInterruptHandler 0684  
                 _EUSART_SetRxInterruptHandler 067E                                    GrabCol@rows 0074  
                           _EUSART_Receive_ISR 0000  EUSART_SetFramingErrorHandler@interruptHandler 0070  
                           EUSART_Write@txData 0070                 __end_of_PIN_MANAGER_Initialize 06EB  
                              _TMR1_Initialize 06EB  
